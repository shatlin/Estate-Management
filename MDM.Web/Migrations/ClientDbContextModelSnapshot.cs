// <auto-generated />
using System;
using MM.ClientModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WISA.Web.Migrations
{
    [DbContext(typeof(ClientDbContext))]
    partial class ClientDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MM.ClientModels.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AccountType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Savings Account"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cheque Account"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Corporate Account"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Business Account"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("AddressLine3")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Gpscoordinates")
                        .HasColumnName("GPSCoordinates")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PrimaryContactNo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PrimaryEmail")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Province")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedToId")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryContactNo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StateName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Suburb")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RelatedToId");

                    b.HasIndex("StateId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("MM.ClientModels.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AddressType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Postal Address"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Physical Address"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Billing Address"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Business Address"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Shipping Address"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Contact Address"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Venue"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Affliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Affliation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ECSA"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "IMESA"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "IWA"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SACNASP"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SAICE"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MM.ClientModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsAdminCreated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("TitleId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MM.ClientModels.BankingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("RoutingCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("BankingDetail");
                });

            modelBuilder.Entity("MM.ClientModels.Billing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommentsForPayer")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("PaymentDueDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentGatewayId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentItem")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PaymentGatewayId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("Billing");
                });

            modelBuilder.Entity("MM.ClientModels.BillingCommunication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BillingId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder1ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder1Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder1SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder2ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder2Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder2SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder3ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder3Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder3SentDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("BillingCommunication");
                });

            modelBuilder.Entity("MM.ClientModels.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Business");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Consultants",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Consultants"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Groundwater Management",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Groundwater Management"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Laboratory Services",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Laboratory Services"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Research and Development",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Research and Development"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Water Infrastructure",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Water Infrastructure"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Water /Waste Water Management",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Water /Waste Water Management"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Industrial Mine Waer Management",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Industrial Mine Waer Management"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Adelaide",
                            StateId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Alfred Nzo District Municipality",
                            StateId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Alice",
                            StateId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Aliwal North",
                            StateId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Amathole District Municipality",
                            StateId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bhisho",
                            StateId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Buffalo City Metropolitan Municipality",
                            StateId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Burgersdorp",
                            StateId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Butterworth",
                            StateId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cacadu District Municipality",
                            StateId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chris Hani District Municipality",
                            StateId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cradock",
                            StateId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dordrecht",
                            StateId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "East London",
                            StateId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Elliot",
                            StateId = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fort Beaufort",
                            StateId = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Graaff-Reinet",
                            StateId = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Grahamstown",
                            StateId = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ilinge",
                            StateId = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Joe Gqabi District Municipality",
                            StateId = 1
                        },
                        new
                        {
                            Id = 21,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kirkwood",
                            StateId = 1
                        },
                        new
                        {
                            Id = 22,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kruisfontein",
                            StateId = 1
                        },
                        new
                        {
                            Id = 23,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lady Frere",
                            StateId = 1
                        },
                        new
                        {
                            Id = 24,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Middelburg",
                            StateId = 1
                        },
                        new
                        {
                            Id = 25,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Molteno",
                            StateId = 1
                        },
                        new
                        {
                            Id = 26,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mthatha",
                            StateId = 1
                        },
                        new
                        {
                            Id = 27,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nelson Mandela Bay Metropolitan Municipality",
                            StateId = 1
                        },
                        new
                        {
                            Id = 28,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OR Tambo District Municipality",
                            StateId = 1
                        },
                        new
                        {
                            Id = 29,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Port Alfred",
                            StateId = 1
                        },
                        new
                        {
                            Id = 30,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Port Elizabeth",
                            StateId = 1
                        },
                        new
                        {
                            Id = 31,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Port Saint Johnâ€™s",
                            StateId = 1
                        },
                        new
                        {
                            Id = 32,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Queensdale",
                            StateId = 1
                        },
                        new
                        {
                            Id = 33,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Queenstown",
                            StateId = 1
                        },
                        new
                        {
                            Id = 34,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Somerset East",
                            StateId = 1
                        },
                        new
                        {
                            Id = 35,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Stutterheim",
                            StateId = 1
                        },
                        new
                        {
                            Id = 36,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Uitenhage",
                            StateId = 1
                        },
                        new
                        {
                            Id = 37,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Whittlesea",
                            StateId = 1
                        },
                        new
                        {
                            Id = 38,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Willowmore",
                            StateId = 1
                        },
                        new
                        {
                            Id = 39,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Allanridge",
                            StateId = 2
                        },
                        new
                        {
                            Id = 40,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bethlehem",
                            StateId = 2
                        },
                        new
                        {
                            Id = 41,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bloemfontein",
                            StateId = 2
                        },
                        new
                        {
                            Id = 42,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bothaville",
                            StateId = 2
                        },
                        new
                        {
                            Id = 43,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Botshabelo",
                            StateId = 2
                        },
                        new
                        {
                            Id = 44,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Brandfort",
                            StateId = 2
                        },
                        new
                        {
                            Id = 45,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Clocolan",
                            StateId = 2
                        },
                        new
                        {
                            Id = 46,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deneysville",
                            StateId = 2
                        },
                        new
                        {
                            Id = 47,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fezile Dabi District Municipality",
                            StateId = 2
                        },
                        new
                        {
                            Id = 48,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Frankfort",
                            StateId = 2
                        },
                        new
                        {
                            Id = 49,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Harrismith",
                            StateId = 2
                        },
                        new
                        {
                            Id = 50,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heilbron",
                            StateId = 2
                        },
                        new
                        {
                            Id = 51,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hennenman",
                            StateId = 2
                        },
                        new
                        {
                            Id = 52,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hoopstad",
                            StateId = 2
                        },
                        new
                        {
                            Id = 53,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Koppies",
                            StateId = 2
                        },
                        new
                        {
                            Id = 54,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kroonstad",
                            StateId = 2
                        },
                        new
                        {
                            Id = 55,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kutloanong",
                            StateId = 2
                        },
                        new
                        {
                            Id = 56,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ladybrand",
                            StateId = 2
                        },
                        new
                        {
                            Id = 57,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lejweleputswa District Municipality",
                            StateId = 2
                        },
                        new
                        {
                            Id = 58,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lindley",
                            StateId = 2
                        },
                        new
                        {
                            Id = 59,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mangaung Metropolitan Municipality",
                            StateId = 2
                        },
                        new
                        {
                            Id = 60,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Marquard",
                            StateId = 2
                        },
                        new
                        {
                            Id = 61,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Parys",
                            StateId = 2
                        },
                        new
                        {
                            Id = 62,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Phuthaditjhaba",
                            StateId = 2
                        },
                        new
                        {
                            Id = 63,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Reitz",
                            StateId = 2
                        },
                        new
                        {
                            Id = 64,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sasolburg",
                            StateId = 2
                        },
                        new
                        {
                            Id = 65,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Senekal",
                            StateId = 2
                        },
                        new
                        {
                            Id = 66,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Thaba Nchu",
                            StateId = 2
                        },
                        new
                        {
                            Id = 67,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Thabo Mofutsanyana District Municipality",
                            StateId = 2
                        },
                        new
                        {
                            Id = 68,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Theunissen",
                            StateId = 2
                        },
                        new
                        {
                            Id = 69,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ventersburg",
                            StateId = 2
                        },
                        new
                        {
                            Id = 70,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Viljoenskroon",
                            StateId = 2
                        },
                        new
                        {
                            Id = 71,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Villiers",
                            StateId = 2
                        },
                        new
                        {
                            Id = 72,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Virginia",
                            StateId = 2
                        },
                        new
                        {
                            Id = 73,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vrede",
                            StateId = 2
                        },
                        new
                        {
                            Id = 74,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vredefort",
                            StateId = 2
                        },
                        new
                        {
                            Id = 75,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Welkom",
                            StateId = 2
                        },
                        new
                        {
                            Id = 76,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Wesselsbron",
                            StateId = 2
                        },
                        new
                        {
                            Id = 77,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Winburg",
                            StateId = 2
                        },
                        new
                        {
                            Id = 78,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Xhariep District Municipality",
                            StateId = 2
                        },
                        new
                        {
                            Id = 79,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zastron",
                            StateId = 2
                        },
                        new
                        {
                            Id = 80,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Alberton",
                            StateId = 3
                        },
                        new
                        {
                            Id = 81,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Benoni",
                            StateId = 3
                        },
                        new
                        {
                            Id = 82,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Boksburg",
                            StateId = 3
                        },
                        new
                        {
                            Id = 83,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Brakpan",
                            StateId = 3
                        },
                        new
                        {
                            Id = 84,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bronkhorstspruit",
                            StateId = 3
                        },
                        new
                        {
                            Id = 85,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Carletonville",
                            StateId = 3
                        },
                        new
                        {
                            Id = 86,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Centurion",
                            StateId = 3
                        },
                        new
                        {
                            Id = 87,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "City of Johannesburg Metropolitan Municipality",
                            StateId = 3
                        },
                        new
                        {
                            Id = 88,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "City of Tshwane Metropolitan Municipality",
                            StateId = 3
                        },
                        new
                        {
                            Id = 89,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cullinan",
                            StateId = 3
                        },
                        new
                        {
                            Id = 90,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Diepsloot",
                            StateId = 3
                        },
                        new
                        {
                            Id = 91,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eastleigh",
                            StateId = 3
                        },
                        new
                        {
                            Id = 92,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eden Glen",
                            StateId = 3
                        },
                        new
                        {
                            Id = 93,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eden Glen Ext 60",
                            StateId = 3
                        },
                        new
                        {
                            Id = 94,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Edenvale",
                            StateId = 3
                        },
                        new
                        {
                            Id = 95,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ekangala",
                            StateId = 3
                        },
                        new
                        {
                            Id = 96,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ekurhuleni Metropolitan Municipality",
                            StateId = 3
                        },
                        new
                        {
                            Id = 97,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heidelberg",
                            StateId = 3
                        },
                        new
                        {
                            Id = 98,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Johannesburg",
                            StateId = 3
                        },
                        new
                        {
                            Id = 99,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Krugersdorp",
                            StateId = 3
                        },
                        new
                        {
                            Id = 100,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mabopane",
                            StateId = 3
                        },
                        new
                        {
                            Id = 101,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Midrand",
                            StateId = 3
                        },
                        new
                        {
                            Id = 102,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Midstream",
                            StateId = 3
                        },
                        new
                        {
                            Id = 103,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Modderfontein",
                            StateId = 3
                        },
                        new
                        {
                            Id = 104,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Muldersdriseloop",
                            StateId = 3
                        },
                        new
                        {
                            Id = 105,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nigel",
                            StateId = 3
                        },
                        new
                        {
                            Id = 106,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Orange Farm",
                            StateId = 3
                        },
                        new
                        {
                            Id = 107,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pretoria",
                            StateId = 3
                        },
                        new
                        {
                            Id = 108,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Randburg",
                            StateId = 3
                        },
                        new
                        {
                            Id = 109,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Randfontein",
                            StateId = 3
                        },
                        new
                        {
                            Id = 110,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Roodepoort",
                            StateId = 3
                        },
                        new
                        {
                            Id = 111,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sedibeng District Municipality",
                            StateId = 3
                        },
                        new
                        {
                            Id = 112,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Soweto",
                            StateId = 3
                        },
                        new
                        {
                            Id = 113,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Springs",
                            StateId = 3
                        },
                        new
                        {
                            Id = 114,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tembisa",
                            StateId = 3
                        },
                        new
                        {
                            Id = 115,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vanderbijlpark",
                            StateId = 3
                        },
                        new
                        {
                            Id = 116,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vereeniging",
                            StateId = 3
                        },
                        new
                        {
                            Id = 117,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "West Rand District Municipality",
                            StateId = 3
                        },
                        new
                        {
                            Id = 118,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Westonaria",
                            StateId = 3
                        },
                        new
                        {
                            Id = 119,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Amajuba District Municipality",
                            StateId = 4
                        },
                        new
                        {
                            Id = 120,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ballito",
                            StateId = 4
                        },
                        new
                        {
                            Id = 121,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Berea",
                            StateId = 4
                        },
                        new
                        {
                            Id = 122,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dundee",
                            StateId = 4
                        },
                        new
                        {
                            Id = 123,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Durban",
                            StateId = 4
                        },
                        new
                        {
                            Id = 124,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ekuvukeni",
                            StateId = 4
                        },
                        new
                        {
                            Id = 125,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "eMkhomazi",
                            StateId = 4
                        },
                        new
                        {
                            Id = 126,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Empangeni",
                            StateId = 4
                        },
                        new
                        {
                            Id = 127,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eshowe",
                            StateId = 4
                        },
                        new
                        {
                            Id = 128,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "eSikhaleni",
                            StateId = 4
                        },
                        new
                        {
                            Id = 129,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "eThekwini Metropolitan Municipality",
                            StateId = 4
                        },
                        new
                        {
                            Id = 130,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Glencoe",
                            StateId = 4
                        },
                        new
                        {
                            Id = 131,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Greytown",
                            StateId = 4
                        },
                        new
                        {
                            Id = 132,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hluhluwe",
                            StateId = 4
                        },
                        new
                        {
                            Id = 133,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Howick",
                            StateId = 4
                        },
                        new
                        {
                            Id = 134,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "iLembe District Municipality",
                            StateId = 4
                        },
                        new
                        {
                            Id = 135,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kokstad",
                            StateId = 4
                        },
                        new
                        {
                            Id = 136,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KwaDukuza",
                            StateId = 4
                        },
                        new
                        {
                            Id = 137,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Margate",
                            StateId = 4
                        },
                        new
                        {
                            Id = 138,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mondlo",
                            StateId = 4
                        },
                        new
                        {
                            Id = 139,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mooirivier",
                            StateId = 4
                        },
                        new
                        {
                            Id = 140,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mpophomeni",
                            StateId = 4
                        },
                        new
                        {
                            Id = 141,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mpumalanga",
                            StateId = 4
                        },
                        new
                        {
                            Id = 142,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mtubatuba",
                            StateId = 4
                        },
                        new
                        {
                            Id = 143,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ndwedwe",
                            StateId = 4
                        },
                        new
                        {
                            Id = 144,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Newcastle",
                            StateId = 4
                        },
                        new
                        {
                            Id = 145,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pietermaritzburg",
                            StateId = 4
                        },
                        new
                        {
                            Id = 146,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Port Shepstone",
                            StateId = 4
                        },
                        new
                        {
                            Id = 147,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Richards Bay",
                            StateId = 4
                        },
                        new
                        {
                            Id = 148,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Richmond",
                            StateId = 4
                        },
                        new
                        {
                            Id = 149,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Scottburgh",
                            StateId = 4
                        },
                        new
                        {
                            Id = 150,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sisonke District Municipality",
                            StateId = 4
                        },
                        new
                        {
                            Id = 151,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sundumbili",
                            StateId = 4
                        },
                        new
                        {
                            Id = 152,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ugu District Municipality",
                            StateId = 4
                        },
                        new
                        {
                            Id = 153,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ulundi",
                            StateId = 4
                        },
                        new
                        {
                            Id = 154,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "uMgungundlovu District Municipality",
                            StateId = 4
                        },
                        new
                        {
                            Id = 155,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "uMkhanyakude District Municipality",
                            StateId = 4
                        },
                        new
                        {
                            Id = 156,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "uMzinyathi District Municipality",
                            StateId = 4
                        },
                        new
                        {
                            Id = 157,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "uThukela District Municipality",
                            StateId = 4
                        },
                        new
                        {
                            Id = 158,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "uThungulu District Municipality",
                            StateId = 4
                        },
                        new
                        {
                            Id = 159,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Utrecht",
                            StateId = 4
                        },
                        new
                        {
                            Id = 160,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vryheid",
                            StateId = 4
                        },
                        new
                        {
                            Id = 161,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zululand District Municipality",
                            StateId = 4
                        },
                        new
                        {
                            Id = 162,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bochum",
                            StateId = 5
                        },
                        new
                        {
                            Id = 163,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Capricorn District Municipality",
                            StateId = 5
                        },
                        new
                        {
                            Id = 164,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Duiwelskloof",
                            StateId = 5
                        },
                        new
                        {
                            Id = 165,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ga-Kgapane",
                            StateId = 5
                        },
                        new
                        {
                            Id = 166,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Giyani",
                            StateId = 5
                        },
                        new
                        {
                            Id = 167,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lebowakgomo",
                            StateId = 5
                        },
                        new
                        {
                            Id = 168,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Louis Trichardt",
                            StateId = 5
                        },
                        new
                        {
                            Id = 169,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mankoeng",
                            StateId = 5
                        },
                        new
                        {
                            Id = 170,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Modimolle",
                            StateId = 5
                        },
                        new
                        {
                            Id = 171,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mokopane",
                            StateId = 5
                        },
                        new
                        {
                            Id = 172,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mopani District Municipality",
                            StateId = 5
                        },
                        new
                        {
                            Id = 173,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Musina",
                            StateId = 5
                        },
                        new
                        {
                            Id = 174,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nkowakowa",
                            StateId = 5
                        },
                        new
                        {
                            Id = 175,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Phalaborwa",
                            StateId = 5
                        },
                        new
                        {
                            Id = 176,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Polokwane",
                            StateId = 5
                        },
                        new
                        {
                            Id = 177,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sekhukhune District Municipality",
                            StateId = 5
                        },
                        new
                        {
                            Id = 178,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Thabazimbi",
                            StateId = 5
                        },
                        new
                        {
                            Id = 179,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Thohoyandou",
                            StateId = 5
                        },
                        new
                        {
                            Id = 180,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Thulamahashi",
                            StateId = 5
                        },
                        new
                        {
                            Id = 181,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tzaneen",
                            StateId = 5
                        },
                        new
                        {
                            Id = 182,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vhembe District Municipality",
                            StateId = 5
                        },
                        new
                        {
                            Id = 183,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Warmbaths",
                            StateId = 5
                        },
                        new
                        {
                            Id = 184,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Waterberg District Municipality",
                            StateId = 5
                        },
                        new
                        {
                            Id = 185,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Balfour",
                            StateId = 6
                        },
                        new
                        {
                            Id = 186,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Barberton",
                            StateId = 6
                        },
                        new
                        {
                            Id = 187,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Belfast",
                            StateId = 6
                        },
                        new
                        {
                            Id = 188,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bethal",
                            StateId = 6
                        },
                        new
                        {
                            Id = 189,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Breyten",
                            StateId = 6
                        },
                        new
                        {
                            Id = 190,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Carolina",
                            StateId = 6
                        },
                        new
                        {
                            Id = 191,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Delmas",
                            StateId = 6
                        },
                        new
                        {
                            Id = 192,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Driefontein",
                            StateId = 6
                        },
                        new
                        {
                            Id = 193,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ehlanzeni District",
                            StateId = 6
                        },
                        new
                        {
                            Id = 194,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "eMbalenhle",
                            StateId = 6
                        },
                        new
                        {
                            Id = 195,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ermelo",
                            StateId = 6
                        },
                        new
                        {
                            Id = 196,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gert Sibande District Municipality",
                            StateId = 6
                        },
                        new
                        {
                            Id = 197,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hendrina",
                            StateId = 6
                        },
                        new
                        {
                            Id = 198,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Komatipoort",
                            StateId = 6
                        },
                        new
                        {
                            Id = 199,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kriel",
                            StateId = 6
                        },
                        new
                        {
                            Id = 200,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lydenburg",
                            StateId = 6
                        },
                        new
                        {
                            Id = 201,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Middelburg",
                            StateId = 6
                        },
                        new
                        {
                            Id = 202,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nelspruit",
                            StateId = 6
                        },
                        new
                        {
                            Id = 203,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nkangala District Municipality",
                            StateId = 6
                        },
                        new
                        {
                            Id = 204,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Piet Retief",
                            StateId = 6
                        },
                        new
                        {
                            Id = 205,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Secunda",
                            StateId = 6
                        },
                        new
                        {
                            Id = 206,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Siyabuswa",
                            StateId = 6
                        },
                        new
                        {
                            Id = 207,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Standerton",
                            StateId = 6
                        },
                        new
                        {
                            Id = 208,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Volksrust",
                            StateId = 6
                        },
                        new
                        {
                            Id = 209,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "White River",
                            StateId = 6
                        },
                        new
                        {
                            Id = 210,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Witbank",
                            StateId = 6
                        },
                        new
                        {
                            Id = 211,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bloemhof",
                            StateId = 7
                        },
                        new
                        {
                            Id = 212,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bojanala Platinum District Municipality",
                            StateId = 7
                        },
                        new
                        {
                            Id = 213,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Brits",
                            StateId = 7
                        },
                        new
                        {
                            Id = 214,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Christiana",
                            StateId = 7
                        },
                        new
                        {
                            Id = 215,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dr Kenneth Kaunda District Municipality",
                            StateId = 7
                        },
                        new
                        {
                            Id = 216,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dr Ruth Segomotsi Mompati District Municipality",
                            StateId = 7
                        },
                        new
                        {
                            Id = 217,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fochville",
                            StateId = 7
                        },
                        new
                        {
                            Id = 218,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ga-Rankuwa",
                            StateId = 7
                        },
                        new
                        {
                            Id = 219,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jan Kempdorp",
                            StateId = 7
                        },
                        new
                        {
                            Id = 220,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Klerksdorp",
                            StateId = 7
                        },
                        new
                        {
                            Id = 221,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Koster",
                            StateId = 7
                        },
                        new
                        {
                            Id = 222,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lichtenburg",
                            StateId = 7
                        },
                        new
                        {
                            Id = 223,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mahikeng",
                            StateId = 7
                        },
                        new
                        {
                            Id = 224,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Maile",
                            StateId = 7
                        },
                        new
                        {
                            Id = 225,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mmabatho",
                            StateId = 7
                        },
                        new
                        {
                            Id = 226,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ngaka Modiri Molema District Municipality",
                            StateId = 7
                        },
                        new
                        {
                            Id = 227,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Orkney",
                            StateId = 7
                        },
                        new
                        {
                            Id = 228,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Potchefstroom",
                            StateId = 7
                        },
                        new
                        {
                            Id = 229,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rustenburg",
                            StateId = 7
                        },
                        new
                        {
                            Id = 230,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Schweizer-Reneke",
                            StateId = 7
                        },
                        new
                        {
                            Id = 231,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Stilfontein",
                            StateId = 7
                        },
                        new
                        {
                            Id = 232,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vryburg",
                            StateId = 7
                        },
                        new
                        {
                            Id = 233,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Wolmaransstad",
                            StateId = 7
                        },
                        new
                        {
                            Id = 234,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zeerust",
                            StateId = 7
                        },
                        new
                        {
                            Id = 235,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Barkly West",
                            StateId = 8
                        },
                        new
                        {
                            Id = 236,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Brandvlei",
                            StateId = 8
                        },
                        new
                        {
                            Id = 237,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Calvinia",
                            StateId = 8
                        },
                        new
                        {
                            Id = 238,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Carnarvon",
                            StateId = 8
                        },
                        new
                        {
                            Id = 239,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Colesberg",
                            StateId = 8
                        },
                        new
                        {
                            Id = 240,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DaniÃ«lskuil",
                            StateId = 8
                        },
                        new
                        {
                            Id = 241,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Aar",
                            StateId = 8
                        },
                        new
                        {
                            Id = 242,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Frances Baard District Municipality",
                            StateId = 8
                        },
                        new
                        {
                            Id = 243,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fraserburg",
                            StateId = 8
                        },
                        new
                        {
                            Id = 244,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "John Taolo Gaetsewe District Municipality",
                            StateId = 8
                        },
                        new
                        {
                            Id = 245,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kathu",
                            StateId = 8
                        },
                        new
                        {
                            Id = 246,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kenhardt",
                            StateId = 8
                        },
                        new
                        {
                            Id = 247,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kimberley",
                            StateId = 8
                        },
                        new
                        {
                            Id = 248,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kuruman",
                            StateId = 8
                        },
                        new
                        {
                            Id = 249,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Namakwa District Municipality",
                            StateId = 8
                        },
                        new
                        {
                            Id = 250,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Noupoort",
                            StateId = 8
                        },
                        new
                        {
                            Id = 251,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Orania",
                            StateId = 8
                        },
                        new
                        {
                            Id = 252,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pampierstad",
                            StateId = 8
                        },
                        new
                        {
                            Id = 253,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pixley ka Seme District Municipality",
                            StateId = 8
                        },
                        new
                        {
                            Id = 254,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pofadder",
                            StateId = 8
                        },
                        new
                        {
                            Id = 255,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Postmasburg",
                            StateId = 8
                        },
                        new
                        {
                            Id = 256,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Prieska",
                            StateId = 8
                        },
                        new
                        {
                            Id = 257,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ritchie",
                            StateId = 8
                        },
                        new
                        {
                            Id = 258,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Siyanda District Municipality",
                            StateId = 8
                        },
                        new
                        {
                            Id = 259,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Springbok",
                            StateId = 8
                        },
                        new
                        {
                            Id = 260,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Upington",
                            StateId = 8
                        },
                        new
                        {
                            Id = 261,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Van Wyksvlei",
                            StateId = 8
                        },
                        new
                        {
                            Id = 262,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Warrenton",
                            StateId = 8
                        },
                        new
                        {
                            Id = 263,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Albertina",
                            StateId = 9
                        },
                        new
                        {
                            Id = 264,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Arniston",
                            StateId = 9
                        },
                        new
                        {
                            Id = 265,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlantis",
                            StateId = 9
                        },
                        new
                        {
                            Id = 266,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Beaufort West",
                            StateId = 9
                        },
                        new
                        {
                            Id = 267,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bergvliet",
                            StateId = 9
                        },
                        new
                        {
                            Id = 268,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bredasdorp",
                            StateId = 9
                        },
                        new
                        {
                            Id = 269,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Caledon",
                            StateId = 9
                        },
                        new
                        {
                            Id = 270,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Calitzdorp",
                            StateId = 9
                        },
                        new
                        {
                            Id = 271,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cape Town",
                            StateId = 9
                        },
                        new
                        {
                            Id = 272,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cape Winelands District Municipality",
                            StateId = 9
                        },
                        new
                        {
                            Id = 273,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Central Karoo District Municipality",
                            StateId = 9
                        },
                        new
                        {
                            Id = 274,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ceres",
                            StateId = 9
                        },
                        new
                        {
                            Id = 275,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "City of Cape Town",
                            StateId = 9
                        },
                        new
                        {
                            Id = 276,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Clanwilliam",
                            StateId = 9
                        },
                        new
                        {
                            Id = 277,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Claremont",
                            StateId = 9
                        },
                        new
                        {
                            Id = 278,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Constantia",
                            StateId = 9
                        },
                        new
                        {
                            Id = 279,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "De Rust",
                            StateId = 9
                        },
                        new
                        {
                            Id = 280,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eden District Municipality",
                            StateId = 9
                        },
                        new
                        {
                            Id = 281,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "George",
                            StateId = 9
                        },
                        new
                        {
                            Id = 282,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Grabouw",
                            StateId = 9
                        },
                        new
                        {
                            Id = 283,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hardys Memories of Africa",
                            StateId = 9
                        },
                        new
                        {
                            Id = 284,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hermanus",
                            StateId = 9
                        },
                        new
                        {
                            Id = 285,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Knysna",
                            StateId = 9
                        },
                        new
                        {
                            Id = 286,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kraaifontein",
                            StateId = 9
                        },
                        new
                        {
                            Id = 287,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ladismith",
                            StateId = 9
                        },
                        new
                        {
                            Id = 288,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lansdowne",
                            StateId = 9
                        },
                        new
                        {
                            Id = 289,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Malmesbury",
                            StateId = 9
                        },
                        new
                        {
                            Id = 290,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Montagu",
                            StateId = 9
                        },
                        new
                        {
                            Id = 291,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Moorreesburg",
                            StateId = 9
                        },
                        new
                        {
                            Id = 292,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mossel Bay",
                            StateId = 9
                        },
                        new
                        {
                            Id = 293,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Newlands",
                            StateId = 9
                        },
                        new
                        {
                            Id = 294,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Oudtshoorn",
                            StateId = 9
                        },
                        new
                        {
                            Id = 295,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Overberg District Municipality",
                            StateId = 9
                        },
                        new
                        {
                            Id = 296,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Paarl",
                            StateId = 9
                        },
                        new
                        {
                            Id = 297,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Piketberg",
                            StateId = 9
                        },
                        new
                        {
                            Id = 298,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Plettenberg Bay",
                            StateId = 9
                        },
                        new
                        {
                            Id = 299,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Prince Albert",
                            StateId = 9
                        },
                        new
                        {
                            Id = 300,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Retreat",
                            StateId = 9
                        },
                        new
                        {
                            Id = 301,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Riversdale",
                            StateId = 9
                        },
                        new
                        {
                            Id = 302,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Robertson",
                            StateId = 9
                        },
                        new
                        {
                            Id = 303,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rondebosch",
                            StateId = 9
                        },
                        new
                        {
                            Id = 304,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rosebank",
                            StateId = 9
                        },
                        new
                        {
                            Id = 305,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Saldanha",
                            StateId = 9
                        },
                        new
                        {
                            Id = 306,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Stellenbosch",
                            StateId = 9
                        },
                        new
                        {
                            Id = 307,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sunset Beach",
                            StateId = 9
                        },
                        new
                        {
                            Id = 308,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Swellendam",
                            StateId = 9
                        },
                        new
                        {
                            Id = 309,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vredenburg",
                            StateId = 9
                        },
                        new
                        {
                            Id = 310,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vredendal",
                            StateId = 9
                        },
                        new
                        {
                            Id = 311,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Wellington",
                            StateId = 9
                        },
                        new
                        {
                            Id = 312,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "West Coast District Municipality",
                            StateId = 9
                        },
                        new
                        {
                            Id = 313,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Worcester",
                            StateId = 9
                        },
                        new
                        {
                            Id = 314,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zoar",
                            StateId = 9
                        });
                });

            modelBuilder.Entity("MM.ClientModels.ClientBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ClientBranch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gauteng"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Limpopo"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KwaZulu Natal"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Western Cape"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Central Regions"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eastern Cape"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mpumalanga"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "International"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Namibia"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.ClientOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AgreedToTerms")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ClientOrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientTimeZoneId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrencyDecimalPlaces")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("DateSettingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("TimeFormatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientOrganizationTypeId");

                    b.HasIndex("ClientTimeZoneId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DateSettingId");

                    b.HasIndex("TimeFormatId");

                    b.ToTable("ClientOrganization");
                });

            modelBuilder.Entity("MM.ClientModels.ClientOrganizationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ClientOrganizationGrade");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Association - Business / Trade",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Association - Business / Trade"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Association - Chamber of commerce",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Association - Chamber of commerce"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Association - Community / HOA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Association - Community / HOA"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Association - Professional",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Association - Professional"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Association - Health",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Association - Health"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Association - Business / Trade",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Association - Business / Trade"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Association - Student/Alumni/PTA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Association - Student/Alumni/PTA"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Association - Teachers",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Association - Teachers"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Church or Religious Community",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Church or Religious Community"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Club - Service",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Club - Service"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Club - Special Interest or Social",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Club - Special Interest or Social"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = " COVID - 19",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = " COVID - 19"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Event / Conference",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Event / Conference"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Foundation or Charity",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Foundation or Charity"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Other(blank template)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Other(blank template)"
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Political / Advocacy",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Political / Advocacy"
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Subscription Site",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Subscription Site"
                        },
                        new
                        {
                            Id = 18,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Support / Assistance Services",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Support / Assistance Services"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.ClientPlanHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BillingUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCurrentPlan")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int>("PlanDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BillingUserId");

                    b.ToTable("ClientPlanHistory");
                });

            modelBuilder.Entity("MM.ClientModels.ClientTimeZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ClientTimeZone");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-12:00) International Date Line West",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dateline Standard Time"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-11:00) MIdway Island, Samoa",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samoa Standard Time"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-10:00) Hawaii",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hawaiian Standard Time"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-09:00) Alaska",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Alaskan Standard Time"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-08:00) Pacific Time (US and Canada); Tijuana",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pacific Standard Time"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-07:00) Mountain Time (US and Canada)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mountain Standard Time"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-07:00) Chihuahua, La Paz, Mazatlan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mexico Standard Time 2"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-07:00) Arizona",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "U.S. Mountain Standard Time"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-06:00) Central Time (US and Canada)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Central Standard Time"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-06:00) Saskatchewan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Canada Central Standard Time"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-06:00) Guadalajara, Mexico City, Monterrey",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mexico Standard Time"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-06:00) Central America",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Central America Standard Time"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-05:00) Eastern Time (US and Canada)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eastern Standard Time"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-05:00) Indiana (East)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "U.S. Eastern Standard Time"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-05:00) Bogota, Lima, Quito",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "S.A. Pacific Standard Time"
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-04:00) Atlantic Time (Canada)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Atlantic Standard Time"
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-04:00) Georgetown, La Paz, San Juan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "S.A. Western Standard Time"
                        },
                        new
                        {
                            Id = 18,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-04:00) Santiago",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pacific S.A. Standard Time"
                        },
                        new
                        {
                            Id = 19,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-03:30) Newfoundland",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Newfoundland and Labrador Standard Time"
                        },
                        new
                        {
                            Id = 20,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-03:00) Brasilia",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "E. South America Standard Time"
                        },
                        new
                        {
                            Id = 21,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-03:00) Georgetown",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "S.A. Eastern Standard Time"
                        },
                        new
                        {
                            Id = 22,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-03:00) Greenland",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Greenland Standard Time"
                        },
                        new
                        {
                            Id = 23,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-02:00) MId-Atlantic",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "MId-Atlantic Standard Time"
                        },
                        new
                        {
                            Id = 24,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-01:00) Azores",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Azores Standard Time"
                        },
                        new
                        {
                            Id = 25,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-01:00) Cape Verde Islands",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cape Verde Standard Time"
                        },
                        new
                        {
                            Id = 26,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT) Greenwich Mean Time: Dublin, Edinburgh, Lisbon, London",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GMT Standard Time"
                        },
                        new
                        {
                            Id = 27,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT) Monrovia, Reykjavik",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Greenwich Standard Time"
                        },
                        new
                        {
                            Id = 28,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Central Europe Standard Time"
                        },
                        new
                        {
                            Id = 29,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Central European Standard Time"
                        },
                        new
                        {
                            Id = 30,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+01:00) Brussels, Copenhagen, MadrId, Paris",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Romance Standard Time"
                        },
                        new
                        {
                            Id = 31,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "W. Europe Standard Time"
                        },
                        new
                        {
                            Id = 32,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+01:00) West Central Africa",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "W. Central Africa Standard Time"
                        },
                        new
                        {
                            Id = 33,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+02:00) Minsk",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "E. Europe Standard Time"
                        },
                        new
                        {
                            Id = 34,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+02:00) Cairo",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Egypt Standard Time"
                        },
                        new
                        {
                            Id = 35,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FLE Standard Time"
                        },
                        new
                        {
                            Id = 36,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+02:00) Athens, Bucharest, Istanbul",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GTB Standard Time"
                        },
                        new
                        {
                            Id = 37,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+02:00) Jerusalem",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Israel Standard Time"
                        },
                        new
                        {
                            Id = 38,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+02:00) Harare, Pretoria",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "South Africa Standard Time"
                        },
                        new
                        {
                            Id = 39,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+03:00) Moscow, St. Petersburg, Volgograd",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Russian Standard Time"
                        },
                        new
                        {
                            Id = 40,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+03:00) Kuwait, Riyadh",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Arab Standard Time"
                        },
                        new
                        {
                            Id = 41,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+03:00) Nairobi",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "E. Africa Standard Time"
                        },
                        new
                        {
                            Id = 42,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+03:00) Baghdad",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Arabic Standard Time"
                        },
                        new
                        {
                            Id = 43,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+03:30) Tehran",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Iran Standard Time"
                        },
                        new
                        {
                            Id = 44,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+04:00) Abu Dhabi, Muscat",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Arabian Standard Time"
                        },
                        new
                        {
                            Id = 45,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+04:00) Baku, Tbilisi, Yerevan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Caucasus Standard Time"
                        },
                        new
                        {
                            Id = 46,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+04:30) Kabul",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Transitional Islamic State of Afghanistan Standard Time"
                        },
                        new
                        {
                            Id = 47,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+05:00) Ekaterinburg",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ekaterinburg Standard Time"
                        },
                        new
                        {
                            Id = 48,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+05:00) Tashkent",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "West Asia Standard Time"
                        },
                        new
                        {
                            Id = 49,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "India Standard Time"
                        },
                        new
                        {
                            Id = 50,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+05:45) Kathmandu",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nepal Standard Time"
                        },
                        new
                        {
                            Id = 51,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+06:00) Astana, Dhaka",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Central Asia Standard Time"
                        },
                        new
                        {
                            Id = 52,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+06:00) Sri Jayawardenepura",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sri Lanka Standard Time"
                        },
                        new
                        {
                            Id = 53,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+06:00) Almaty, Novosibirsk",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "N. Central Asia Standard Time"
                        },
                        new
                        {
                            Id = 54,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+06:30) Yangon (Rangoon)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Myanmar Standard Time"
                        },
                        new
                        {
                            Id = 55,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+07:00) Bangkok, Hanoi, Jakarta",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "S.E. Asia Standard Time"
                        },
                        new
                        {
                            Id = 56,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+07:00) Krasnoyarsk",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "North Asia Standard Time"
                        },
                        new
                        {
                            Id = 57,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "China Standard Time"
                        },
                        new
                        {
                            Id = 58,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+08:00) Kuala Lumpur, Singapore",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Singapore Standard Time"
                        },
                        new
                        {
                            Id = 59,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+08:00) Taipei",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Taipei Standard Time"
                        },
                        new
                        {
                            Id = 60,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+08:00) Perth",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "W. Australia Standard Time"
                        },
                        new
                        {
                            Id = 61,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+08:00) Irkutsk, Ulaanbaatar",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "North Asia East Standard Time"
                        },
                        new
                        {
                            Id = 62,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+09:00) Seoul",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Korea Standard Time"
                        },
                        new
                        {
                            Id = 63,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+09:00) Osaka, Sapporo, Tokyo",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tokyo Standard Time"
                        },
                        new
                        {
                            Id = 64,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+09:00) Yakutsk",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yakutsk Standard Time"
                        },
                        new
                        {
                            Id = 65,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+09:30) Darwin",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "A.U.S. Central Standard Time"
                        },
                        new
                        {
                            Id = 66,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+09:30) AdelaIde",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cen. Australia Standard Time"
                        },
                        new
                        {
                            Id = 67,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+10:00) Canberra, Melbourne, Sydney",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "A.U.S. Eastern Standard Time"
                        },
                        new
                        {
                            Id = 68,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+10:00) Brisbane",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "E. Australia Standard Time"
                        },
                        new
                        {
                            Id = 69,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+10:00) Hobart",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tasmania Standard Time"
                        },
                        new
                        {
                            Id = 70,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+10:00) Vladivostok",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vladivostok Standard Time"
                        },
                        new
                        {
                            Id = 71,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+10:00) Guam, Port Moresby",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "West Pacific Standard Time"
                        },
                        new
                        {
                            Id = 72,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+11:00) Magadan, Solomon Islands, New Caledonia",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Central Pacific Standard Time"
                        },
                        new
                        {
                            Id = 73,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+12:00) Fiji, Kamchatka, Marshall Is.",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fiji Islands Standard Time"
                        },
                        new
                        {
                            Id = 74,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+12:00) Auckland, Wellington",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Zealand Standard Time"
                        },
                        new
                        {
                            Id = 75,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+13:00) Nuku'alofa",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tonga Standard Time"
                        },
                        new
                        {
                            Id = 76,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-03:00) Buenos Aires",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Azerbaijan Standard Time "
                        },
                        new
                        {
                            Id = 77,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+02:00) Beirut",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "MIddle East Standard Time"
                        },
                        new
                        {
                            Id = 78,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+02:00) Amman",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jordan Standard Time"
                        },
                        new
                        {
                            Id = 79,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-06:00) Guadalajara, Mexico City, Monterrey - New",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Central Standard Time (Mexico)"
                        },
                        new
                        {
                            Id = 80,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-07:00) Chihuahua, La Paz, Mazatlan - New",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mountain Standard Time (Mexico)"
                        },
                        new
                        {
                            Id = 81,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-08:00) Tijuana, Baja California",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pacific Standard Time (Mexico)"
                        },
                        new
                        {
                            Id = 82,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+02:00) Windhoek",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Namibia Standard Time"
                        },
                        new
                        {
                            Id = 83,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+03:00) Tbilisi",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Georgian Standard Time"
                        },
                        new
                        {
                            Id = 84,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-04:00) Manaus",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Central Brazilian Standard Time"
                        },
                        new
                        {
                            Id = 85,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-03:00) MontevIdeo",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "MontevIdeo Standard Time"
                        },
                        new
                        {
                            Id = 86,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+04:00) Yerevan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Armenian Standard Time"
                        },
                        new
                        {
                            Id = 87,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-04:30) Caracas",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Venezuela Standard Time"
                        },
                        new
                        {
                            Id = 88,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-03:00) Buenos Aires",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Argentina Standard Time"
                        },
                        new
                        {
                            Id = 89,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT) Casablanca",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Morocco Standard Time"
                        },
                        new
                        {
                            Id = 90,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+05:00) Islamabad, Karachi",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pakistan Standard Time"
                        },
                        new
                        {
                            Id = 91,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+04:00) Port Louis",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mauritius Standard Time"
                        },
                        new
                        {
                            Id = 92,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT) Coordinated Universal Time",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UTC"
                        },
                        new
                        {
                            Id = 93,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT-04:00) Asuncion",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Paraguay Standard Time"
                        },
                        new
                        {
                            Id = 94,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "(GMT+12:00) Petropavlovsk-Kamchatsky",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kamchatka Standard Time"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.ClientUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicaitonUserId")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("BillingContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInternalUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<bool>("PrimaryContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ReferralTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("TermsAccepted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicaitonUserId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("ReferralTypeId");

                    b.HasIndex("RoleId");

                    b.ToTable("ClientUser");
                });

            modelBuilder.Entity("MM.ClientModels.CommunicationPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CommunicationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("PreferredTimeFrom")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan?>("PreferredTimeTo")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationTypeId");

                    b.ToTable("CommunicationPreference");
                });

            modelBuilder.Entity("MM.ClientModels.CommunicationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CommunicationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Email Message",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Email"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fax Message",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fax"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mobile / Phone Call",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Phone"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Postal Letter",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Post"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Text Message",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SMS"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "No Preferences",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Any"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ActionedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ClientQuery")
                        .IsRequired()
                        .HasColumnType("varchar(1500) CHARACTER SET utf8mb4")
                        .HasMaxLength(1500);

                    b.Property<int?>("ContactUsRelatedToId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Response")
                        .HasColumnType("varchar(1500) CHARACTER SET utf8mb4")
                        .HasMaxLength(1500);

                    b.Property<bool>("isResolved")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ActionedByUserId");

                    b.HasIndex("ContactUsRelatedToId");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("MM.ClientModels.ContactUsRelatedTo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ContactUsRelatedTo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Membership"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Events"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Registration"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.CorrespondenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CorrespondenceType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Internal Correspondance",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Internal"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "External Correspondance",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "External"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sales Correspondance",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sales"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Reminders, Statements Invoices to Members",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Personal"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Common messages",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Circular"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Private Messages",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Confidential"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "South African",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Namibian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Afghan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Åland Islands",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Åland Islands"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Albanian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Algerian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "American Samoa",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "American Samoa"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Andorran",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Angolan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Angola"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Anguilla",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Anguilla"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Antarctica",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Antarctica"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Antigua and Barbuda",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Argentinian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Armenian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Aruba",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Aruba"
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Australian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Austrian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 18,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Azerbaijani",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 19,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bahamian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bahamas"
                        },
                        new
                        {
                            Id = 20,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bahraini",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = 21,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bangladeshi",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 22,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Barbadian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = 23,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Belarusan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 24,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Belgian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 25,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Belizean",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Belize"
                        },
                        new
                        {
                            Id = 26,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Beninese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Benin"
                        },
                        new
                        {
                            Id = 27,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bermuda",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bermuda"
                        },
                        new
                        {
                            Id = 28,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bhutanese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = 29,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bolivian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = 30,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bonaire",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bonaire"
                        },
                        new
                        {
                            Id = 31,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bosnian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bosnia-Herzegovina"
                        },
                        new
                        {
                            Id = 32,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Botswanan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = 33,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bouvet Island",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bouvet Island"
                        },
                        new
                        {
                            Id = 34,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Brazilian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 35,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "British Indian Ocean Territory",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "British Indian Ocean Territory"
                        },
                        new
                        {
                            Id = 36,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bruneian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Brunei"
                        },
                        new
                        {
                            Id = 37,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bulgarian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 38,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Burkinese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = 39,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Burundian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = 40,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cambodian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = 41,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cameroonian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = 42,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Canadian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 43,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cape Verdean",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cape Verde Islands"
                        },
                        new
                        {
                            Id = 44,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cayman Islands",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cayman Islands"
                        },
                        new
                        {
                            Id = 45,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Central African Republic",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Central African Republic"
                        },
                        new
                        {
                            Id = 46,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chadian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chad"
                        },
                        new
                        {
                            Id = 47,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chilean",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 48,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chinese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "China"
                        },
                        new
                        {
                            Id = 49,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Christmas Island",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Christmas Island"
                        },
                        new
                        {
                            Id = 50,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cocos (Keeling) Islands",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cocos (Keeling) Islands"
                        },
                        new
                        {
                            Id = 51,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Colombian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 52,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Comoros",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Comoros"
                        },
                        new
                        {
                            Id = 53,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Congolese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Congo"
                        },
                        new
                        {
                            Id = 55,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cook Islands",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cook Islands"
                        },
                        new
                        {
                            Id = 56,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Costa Rican",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 57,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Côte d'Ivoire",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Côte d'Ivoire"
                        },
                        new
                        {
                            Id = 58,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Croatian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 59,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cuban",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = 60,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Curaçao",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Curaçao"
                        },
                        new
                        {
                            Id = 61,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cypriot",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 62,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Czech",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = 63,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Danish",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 64,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Djiboutian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = 65,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dominican",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = 66,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dominican",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = 67,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ecuadorean",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = 68,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Egyptian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 69,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Egyptian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 70,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Salvadorean",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = 71,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Equatorial Guinea",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 72,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Eritrean",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = 73,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Estonian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 74,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Eswatini",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eswatini"
                        },
                        new
                        {
                            Id = 75,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ethiopian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = 76,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Falkland Islands",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Falkland Islands [Malvinas]"
                        },
                        new
                        {
                            Id = 77,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Faroe Islands",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Faroe Islands"
                        },
                        new
                        {
                            Id = 78,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fijian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = 79,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Finnish",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 80,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "French",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "France"
                        },
                        new
                        {
                            Id = 81,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "French Guiana",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "French Guiana"
                        },
                        new
                        {
                            Id = 82,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "French Polynesia",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "French Polynesia"
                        },
                        new
                        {
                            Id = 83,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "French Southern Territories",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "French Southern Territories"
                        },
                        new
                        {
                            Id = 84,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Gabonese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = 85,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Gambian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gambia"
                        },
                        new
                        {
                            Id = 86,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Georgian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 87,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "German",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 88,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ghanaian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = 89,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Gibraltar",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gibraltar"
                        },
                        new
                        {
                            Id = 90,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Greek",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 91,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Greenland",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Greenland"
                        },
                        new
                        {
                            Id = 92,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Grenadian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = 93,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Guadeloupe",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Guadeloupe"
                        },
                        new
                        {
                            Id = 94,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Guam",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Guam"
                        },
                        new
                        {
                            Id = 95,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Guatemalan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = 96,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Guernsey",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Guernsey"
                        },
                        new
                        {
                            Id = 97,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Guinean",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = 98,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Guinea-Bissau",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = 99,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Guyanese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = 100,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Haitian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = 101,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Heard Island and McDonald Islands",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Heard Island and McDonald Islands"
                        },
                        new
                        {
                            Id = 102,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Holy See",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Holy See"
                        },
                        new
                        {
                            Id = 103,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Honduran",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = 104,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hong Kong",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = 105,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hungarian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 106,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Icelandic",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = 107,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Indian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "India"
                        },
                        new
                        {
                            Id = 108,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Indonesian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 109,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Iranian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Iran"
                        },
                        new
                        {
                            Id = 110,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Iraqi",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = 111,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Irish",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 112,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Isle of Man",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Isle of Man"
                        },
                        new
                        {
                            Id = 113,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Israel",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 114,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Italian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 115,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Jamaican",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = 116,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Japanese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 117,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Jersey",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jersey"
                        },
                        new
                        {
                            Id = 118,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Jordanian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 119,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kazakh",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 120,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kenyan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = 121,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kiribati",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = 122,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kuwaiti",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 123,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kyrgyzstan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = 124,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lao People's Democratic Republic",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lao People's Democratic Republic"
                        },
                        new
                        {
                            Id = 125,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Laotian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Laos"
                        },
                        new
                        {
                            Id = 126,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Latvian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 127,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lebanese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = 128,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lesotho",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = 129,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Liberian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = 130,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Libyan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Libya"
                        },
                        new
                        {
                            Id = 131,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Liechtensteiner",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = 132,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lithuanian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 133,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Luxembourger",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 134,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Macao",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Macao"
                        },
                        new
                        {
                            Id = 135,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Macedonian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Macedonia"
                        },
                        new
                        {
                            Id = 136,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Madagascan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = 137,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Malawian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = 138,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Malaysian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 139,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Maldivian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = 140,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Malian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mali"
                        },
                        new
                        {
                            Id = 141,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Maltese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 142,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Marshall Islands",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = 143,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Martinique",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Martinique"
                        },
                        new
                        {
                            Id = 144,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mauritanian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = 145,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mauritian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = 146,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mayotte",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mayotte"
                        },
                        new
                        {
                            Id = 147,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mexican",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 148,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Micronesia",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Micronesia"
                        },
                        new
                        {
                            Id = 149,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Moldovan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = 150,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Monacan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = 151,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mongolian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = 152,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Montenegrin",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = 153,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Montserrat",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Montserrat"
                        },
                        new
                        {
                            Id = 154,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Moroccan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = 155,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mozambican",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = 156,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Burmese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = 157,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nauru",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = 158,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nepalese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = 159,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dutch",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 160,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "New Caledonia",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Caledonia"
                        },
                        new
                        {
                            Id = 161,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "New Zealander",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 162,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nicaraguan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = 163,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nigerien",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Niger"
                        },
                        new
                        {
                            Id = 164,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nigerian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = 165,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Niue",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Niue"
                        },
                        new
                        {
                            Id = 166,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Norfolk Island",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Norfolk Island"
                        },
                        new
                        {
                            Id = 167,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "North Korean",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "North Korea"
                        },
                        new
                        {
                            Id = 168,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Northern Mariana Islands",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            Id = 169,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Norwegian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 170,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Omani",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Oman"
                        },
                        new
                        {
                            Id = 171,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Pakistani",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = 172,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Palau",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Palau"
                        },
                        new
                        {
                            Id = 173,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Palestine",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Palestine"
                        },
                        new
                        {
                            Id = 174,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Panamanian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Panama"
                        },
                        new
                        {
                            Id = 175,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Papua New Guinean",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = 176,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Paraguayan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = 177,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Peruvian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 178,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Pitcairn",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pitcairn"
                        },
                        new
                        {
                            Id = 179,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Polish",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 180,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Portuguese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 181,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Puerto Rico",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = 182,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Qatari",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = 183,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Réunion",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Réunion"
                        },
                        new
                        {
                            Id = 184,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Romanian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 185,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Russian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 186,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rwandan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = 187,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Saint Barthélemy",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Saint Barthélemy"
                        },
                        new
                        {
                            Id = 188,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Saint Helena",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Saint Helena"
                        },
                        new
                        {
                            Id = 189,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Saint Kitts and Nevis",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = 190,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Saint Lucia",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = 191,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Saint Martin (French part)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Saint Martin (French part)"
                        },
                        new
                        {
                            Id = 192,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Saint Pierre and Miquelon",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Saint Pierre and Miquelon"
                        },
                        new
                        {
                            Id = 193,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Saint Vincent and the Grenadines",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            Id = 194,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Samoa",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = 195,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "San Marino",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = 196,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sao Tome and Principe",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Id = 197,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Saudi Arabian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 198,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Scottish",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Scotland"
                        },
                        new
                        {
                            Id = 199,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Senegalese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = 200,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Serb or Serbian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 201,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Seychellois",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = 202,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sierra Leonian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = 203,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Singaporean",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 204,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sint Maarten (Dutch part)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sint Maarten (Dutch part)"
                        },
                        new
                        {
                            Id = 205,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Slovak",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = 206,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Slovenian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 207,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Solomon Islander",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = 208,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Somali",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = 209,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "South Georgia and the South Sandwich Islands",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "South Georgia and the South Sandwich Islands"
                        },
                        new
                        {
                            Id = 210,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "South Korean",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "South Korea"
                        },
                        new
                        {
                            Id = 211,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "South Sudan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "South Sudan"
                        },
                        new
                        {
                            Id = 212,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Spanish",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 213,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sri Lankan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = 214,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sudanese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sudan"
                        },
                        new
                        {
                            Id = 215,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Surinamese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = 216,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Svalbard and Jan Mayen",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Svalbard and Jan Mayen"
                        },
                        new
                        {
                            Id = 217,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Swazi",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SWAZILAND"
                        },
                        new
                        {
                            Id = 218,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Swedish",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 219,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Swiss",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 220,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Syrian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Syria"
                        },
                        new
                        {
                            Id = 221,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Taiwanese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Taiwan"
                        },
                        new
                        {
                            Id = 222,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tajik or Tadjik",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = 223,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tanzanian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tanzania"
                        },
                        new
                        {
                            Id = 224,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Thai",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = 225,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Philippine",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = 226,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Timor-Leste",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            Id = 227,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Togolese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Togo"
                        },
                        new
                        {
                            Id = 228,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tokelau",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tokelau"
                        },
                        new
                        {
                            Id = 229,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tonga",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = 230,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Trinidadian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 231,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tunisian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = 232,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Turkish",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 233,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Turkmen or Turkoman",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = 234,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Turks and Caicos Islands",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Turks and Caicos Islands"
                        },
                        new
                        {
                            Id = 235,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tuvaluan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = 236,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ugandan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = 237,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ukrainian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 238,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Emirati",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 239,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Briton",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 240,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "United States Minor Outlying Islands",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United States Minor Outlying Islands"
                        },
                        new
                        {
                            Id = 241,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "US citizen",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "United States of America"
                        },
                        new
                        {
                            Id = 242,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Uruguayan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = 243,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Uzbek",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = 244,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Vanuatuan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = 245,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Vatican",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vatican City"
                        },
                        new
                        {
                            Id = 246,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Venezuelan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = 247,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Vietnamese",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "VietNam"
                        },
                        new
                        {
                            Id = 248,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Virgin Islands -U.S.",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Virgin Islands -U.S."
                        },
                        new
                        {
                            Id = 249,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Virgin Islands-British",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Virgin Islands-British"
                        },
                        new
                        {
                            Id = 250,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Welsh",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Wales"
                        },
                        new
                        {
                            Id = 251,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Wallis and Futuna",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Wallis and Futuna"
                        },
                        new
                        {
                            Id = 252,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Western Sahara",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Western Sahara"
                        },
                        new
                        {
                            Id = 253,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Western Samoan",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Western Samoa"
                        },
                        new
                        {
                            Id = 254,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yemeni",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = 255,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yugoslav",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yugoslavia"
                        },
                        new
                        {
                            Id = 256,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Zaïrean",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zaire"
                        },
                        new
                        {
                            Id = 257,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Zambian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = 258,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Zimbabwean",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Cpd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CpdawardedById")
                        .HasColumnName("CPDAwardedById")
                        .HasColumnType("int");

                    b.Property<int>("Cpdearned")
                        .HasColumnName("CPDEarned")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CpdawardedById");

                    b.HasIndex("MemberId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("CPD");
                });

            modelBuilder.Entity("MM.ClientModels.CpdMemberShipGradeSetUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cpdcount")
                        .HasColumnName("CPDCount")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MembershipGradeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MembershipGradeId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("CPDMembershipGradeSetUp");
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberLevelSetUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cpdcount")
                        .HasColumnName("CPDCount")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MemberLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberLevelId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("CPDMemberLevelSetUp");
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberTeamSetUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cpdcount")
                        .HasColumnName("CPDCount")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MemberTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberTeamId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("CPDMemberTeamSetUp");
                });

            modelBuilder.Entity("MM.ClientModels.CpdmembershipTypeSetUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cpdcount")
                        .HasColumnName("CPDCount")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MembershipTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MembershipTypeId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("CPDMembershipTypeSetUp");
                });

            modelBuilder.Entity("MM.ClientModels.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(3) CHARACTER SET utf8mb4")
                        .HasMaxLength(3);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Symbol")
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AFN",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Currency for  AFGHANISTAN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Afghani",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 2,
                            Code = "ALL",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ALBANIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lek",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 3,
                            Code = "DZD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ALGERIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Algerian Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 4,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "AMERICAN SAMOA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 5,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ANDORRA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 6,
                            Code = "AOA",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ANGOLA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kwanza",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 7,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ANGUILLA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 8,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ANTIGUA AND BARBUDA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 9,
                            Code = "ARS",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ARGENTINA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Argentine Peso",
                            Symbol = ""
                        },
                        new
                        {
                            Id = 10,
                            Code = "AMD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ARMENIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Armenian Dram",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 11,
                            Code = "AWG",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ARUBA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Aruban Florin",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 12,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "AUSTRALIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 13,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "AUSTRIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 14,
                            Code = "AZN",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "AZERBAIJAN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Azerbaijanian Manat",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 15,
                            Code = "BSD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BAHAMAS (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bahamian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 16,
                            Code = "BHD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BAHRAIN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bahraini Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 17,
                            Code = "BDT",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BANGLADESH",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Taka",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 18,
                            Code = "BBD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BARBADOS",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Barbados Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 19,
                            Code = "BYN",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BELARUS",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Belarussian Ruble",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 20,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BELGIUM",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 21,
                            Code = "BZD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BELIZE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Belize Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 22,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BENIN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 23,
                            Code = "BMD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BERMUDA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bermudian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 24,
                            Code = "BTN",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BHUTAN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ngultrum",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 25,
                            Code = "INR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BHUTAN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Indian Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 26,
                            Code = "BOB",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BOLIVIA (PLURINATIONAL STATE OF)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Boliviano",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 27,
                            Code = "BOV",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BOLIVIA (PLURINATIONAL STATE OF)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mvdol",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 28,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BONAIRE, SINT EUSTATIUS AND SABA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 29,
                            Code = "BAM",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BOSNIA AND HERZEGOVINA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Convertible Mark",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 30,
                            Code = "BWP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BOTSWANA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pula",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 31,
                            Code = "NOK",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BOUVET ISLAND",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Norwegian Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 32,
                            Code = "BRL",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BRAZIL",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Brazilian Real",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 33,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BRITISH INDIAN OCEAN TERRITORY (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 34,
                            Code = "BND",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BRUNEI DARUSSALAM",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Brunei Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 35,
                            Code = "BGN",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BULGARIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bulgarian Lev",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 36,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BURKINA FASO",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 37,
                            Code = "BIF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "BURUNDI",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Burundi Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 38,
                            Code = "CVE",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CABO VERDE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cabo Verde Escudo",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 39,
                            Code = "KHR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CAMBODIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Riel",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 40,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CAMEROON",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 41,
                            Code = "CAD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CANADA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Canadian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 42,
                            Code = "KYD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CAYMAN ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cayman Islands Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 43,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CENTRAL AFRICAN REPUBLIC (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 44,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CHAD",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 45,
                            Code = "CLF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CHILE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Unidad de Fomento",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 46,
                            Code = "CLP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CHILE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chilean Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 47,
                            Code = "CNY",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CHINA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yuan Renminbi",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 48,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CHRISTMAS ISLAND",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 49,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "COCOS (KEELING) ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 50,
                            Code = "COP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "COLOMBIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Colombian Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 51,
                            Code = "COU",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "COLOMBIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Unidad de Valor Real",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 52,
                            Code = "KMF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "COMOROS (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Comoro Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 53,
                            Code = "CDF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CONGO (THE DEMOCRATIC REPUBLIC OF THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Congolese Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 54,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CONGO (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 55,
                            Code = "NZD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "COOK ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Zealand Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 56,
                            Code = "CRC",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "COSTA RICA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Costa Rican Colon",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 57,
                            Code = "HRK",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CROATIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kuna",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 58,
                            Code = "CUC",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CUBA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Peso Convertible",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 59,
                            Code = "CUP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CUBA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cuban Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 60,
                            Code = "ANG",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CURAÇAO",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Netherlands Antillean Guilder",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 61,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CYPRUS",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 62,
                            Code = "CZK",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CZECH REPUBLIC (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Czech Koruna",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 63,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CÔTE D'IVOIRE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 64,
                            Code = "DKK",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "DENMARK",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Danish Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 65,
                            Code = "DJF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "DJIBOUTI",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Djibouti Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 66,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "DOMINICA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 67,
                            Code = "DOP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "DOMINICAN REPUBLIC (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dominican Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 68,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ECUADOR",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 69,
                            Code = "EGP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "EGYPT",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Egyptian Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 70,
                            Code = "SVC",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "EL SALVADOR",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "El Salvador Colon",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 71,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "EL SALVADOR",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 72,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "EQUATORIAL GUINEA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 73,
                            Code = "ERN",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ERITREA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nakfa",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 74,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ESTONIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 75,
                            Code = "ETB",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ETHIOPIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ethiopian Birr",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 76,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "EUROPEAN UNION",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 77,
                            Code = "FKP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "FALKLAND ISLANDS (THE) [MALVINAS]",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Falkland Islands Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 78,
                            Code = "DKK",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "FAROE ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Danish Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 79,
                            Code = "FJD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "FIJI",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fiji Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 80,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "FINLAND",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 81,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "FRANCE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 82,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "FRENCH GUIANA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 83,
                            Code = "XPF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "FRENCH POLYNESIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFP Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 84,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "FRENCH SOUTHERN TERRITORIES (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 85,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "GABON",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 86,
                            Code = "GMD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "GAMBIA (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dalasi",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 87,
                            Code = "GEL",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "GEORGIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lari",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 88,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "GERMANY",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 89,
                            Code = "GHS",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "GHANA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ghana Cedi",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 90,
                            Code = "GIP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "GIBRALTAR",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gibraltar Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 91,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "GREECE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 92,
                            Code = "DKK",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "GREENLAND",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Danish Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 93,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "GRENADA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 94,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "GUADELOUPE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 95,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "GUAM",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 96,
                            Code = "GTQ",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "GUATEMALA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Quetzal",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 97,
                            Code = "GBP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "GUERNSEY",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pound Sterling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 98,
                            Code = "GNF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "GUINEA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Guinea Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 99,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "GUINEA-BISSAU",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 100,
                            Code = "GYD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "GUYANA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Guyana Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 101,
                            Code = "HTG",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "HAITI",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gourde",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 102,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "HAITI",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 103,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "HEARD ISLAND AND McDONALD ISLANDS",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 104,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "HOLY SEE (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 105,
                            Code = "HNL",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "HONDURAS",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lempira",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 106,
                            Code = "HKD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "HONG KONG",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hong Kong Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 107,
                            Code = "HUF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "HUNGARY",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Forint",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 108,
                            Code = "ISK",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ICELAND",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Iceland Krona",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 109,
                            Code = "INR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "INDIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Indian Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 110,
                            Code = "IDR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "INDONESIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rupiah",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 111,
                            Code = "XDR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "INTERNATIONAL MONETARY FUND (IMF) ",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SDR (Special Drawing Right)",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 112,
                            Code = "IRR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "IRAN (ISLAMIC REPUBLIC OF)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Iranian Rial",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 113,
                            Code = "IQD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "IRAQ",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Iraqi Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 114,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "IRELAND",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 115,
                            Code = "GBP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ISLE OF MAN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pound Sterling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 116,
                            Code = "ILS",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ISRAEL",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Israeli Sheqel",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 117,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ITALY",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 118,
                            Code = "JMD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "JAMAICA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jamaican Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 119,
                            Code = "JPY",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "JAPAN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yen",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 120,
                            Code = "GBP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "JERSEY",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pound Sterling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 121,
                            Code = "JOD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "JORDAN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jordanian Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 122,
                            Code = "KZT",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "KAZAKHSTAN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tenge",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 123,
                            Code = "KES",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "KENYA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kenyan Shilling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 124,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "KIRIBATI",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 125,
                            Code = "KPW",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "KOREA (THE DEMOCRATIC PEOPLE’S REPUBLIC OF)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "North Korean Won",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 126,
                            Code = "KRW",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "KOREA (THE REPUBLIC OF)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Won",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 127,
                            Code = "KWD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "KUWAIT",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kuwaiti Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 128,
                            Code = "KGS",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "KYRGYZSTAN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Som",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 129,
                            Code = "LAK",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "LAO PEOPLE’S DEMOCRATIC REPUBLIC (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kip",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 130,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "LATVIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 131,
                            Code = "LBP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "LEBANON",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lebanese Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 132,
                            Code = "LSL",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "LESOTHO",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Loti",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 133,
                            Code = "ZAR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "LESOTHO",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rand",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 134,
                            Code = "LRD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "LIBERIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Liberian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 135,
                            Code = "LYD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "LIBYA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Libyan Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 136,
                            Code = "CHF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "LIECHTENSTEIN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Swiss Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 137,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "LITHUANIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 138,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "LUXEMBOURG",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 139,
                            Code = "MOP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MACAO",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pataca",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 140,
                            Code = "MGA",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MADAGASCAR",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Malagasy Ariary",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 141,
                            Code = "MWK",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MALAWI",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kwacha",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 142,
                            Code = "MYR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MALAYSIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Malaysian Ringgit",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 143,
                            Code = "MVR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MALDIVES",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rufiyaa",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 144,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MALI",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 145,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MALTA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 146,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MARSHALL ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 147,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MARTINIQUE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 148,
                            Code = "MRU",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MAURITANIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ouguiya",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 149,
                            Code = "MUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MAURITIUS",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mauritius Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 150,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MAYOTTE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 151,
                            Code = "MXN",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MEXICO",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mexican Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 152,
                            Code = "MXV",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MEXICO",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mexican Unidad de Inversion (UDI)",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 153,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MICRONESIA (FEDERATED STATES OF)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 154,
                            Code = "MDL",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MOLDOVA (THE REPUBLIC OF)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Moldovan Leu",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 155,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MONACO",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 156,
                            Code = "MNT",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MONGOLIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tugrik",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 157,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MONTENEGRO",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 158,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MONTSERRAT",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 159,
                            Code = "MAD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MOROCCO",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Moroccan Dirham",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 160,
                            Code = "MZN",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MOZAMBIQUE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mozambique Metical",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 161,
                            Code = "MMK",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "MYANMAR",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kyat",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 162,
                            Code = "NAD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "NAMIBIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Namibia Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 163,
                            Code = "ZAR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "NAMIBIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rand",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 164,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "NAURU",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 165,
                            Code = "NPR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "NEPAL",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nepalese Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 166,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "NETHERLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 167,
                            Code = "XPF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "NEW CALEDONIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFP Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 168,
                            Code = "NZD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "NEW ZEALAND",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Zealand Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 169,
                            Code = "NIO",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "NICARAGUA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cordoba Oro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 170,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "NIGER (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 171,
                            Code = "NGN",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "NIGERIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Naira",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 172,
                            Code = "NZD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "NIUE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Zealand Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 173,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "NORFOLK ISLAND",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 174,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "NORTHERN MARIANA ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 175,
                            Code = "NOK",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "NORWAY",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Norwegian Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 176,
                            Code = "OMR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "OMAN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rial Omani",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 177,
                            Code = "PKR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "PAKISTAN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pakistan Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 178,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "PALAU",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 179,
                            Code = "PAB",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "PANAMA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Balboa",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 180,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "PANAMA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 181,
                            Code = "PGK",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "PAPUA NEW GUINEA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kina",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 182,
                            Code = "PYG",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "PARAGUAY",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Guarani",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 183,
                            Code = "PEN",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "PERU",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nuevo Sol",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 184,
                            Code = "PHP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "PHILIPPINES (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Philippine Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 185,
                            Code = "NZD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "PITCAIRN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Zealand Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 186,
                            Code = "PLN",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "POLAND",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zloty",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 187,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "PORTUGAL",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 188,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "PUERTO RICO",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 189,
                            Code = "QAR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "QATAR",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Qatari Rial",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 190,
                            Code = "MKD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "REPUBLIC OF NORTH MACEDONIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Denar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 191,
                            Code = "RON",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ROMANIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Romanian Leu",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 192,
                            Code = "RUB",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "RUSSIAN FEDERATION (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Russian Ruble",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 193,
                            Code = "RWF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "RWANDA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rwanda Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 194,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "RÉUNION",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 195,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SAINT BARTHÉLEMY",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 196,
                            Code = "SHP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SAINT HELENA, ASCENSION AND TRISTAN DA CUNHA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Saint Helena Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 197,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SAINT KITTS AND NEVIS",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 198,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SAINT LUCIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 199,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SAINT MARTIN (FRENCH PART)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 200,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SAINT PIERRE AND MIQUELON",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 201,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SAINT VINCENT AND THE GRENADINES",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 202,
                            Code = "WST",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SAMOA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tala",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 203,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SAN MARINO",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 204,
                            Code = "STN",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SAO TOME AND PRINCIPE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dobra",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 205,
                            Code = "SAR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SAUDI ARABIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Saudi Riyal",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 206,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SENEGAL",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 207,
                            Code = "RSD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SERBIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Serbian Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 208,
                            Code = "SCR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SEYCHELLES",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Seychelles Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 209,
                            Code = "SLL",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SIERRA LEONE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Leone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 210,
                            Code = "SGD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SINGAPORE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Singapore Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 211,
                            Code = "ANG",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SINT MAARTEN (DUTCH PART)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Netherlands Antillean Guilder",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 212,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SLOVAKIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 213,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SLOVENIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 214,
                            Code = "SBD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SOLOMON ISLANDS",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Solomon Islands Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 215,
                            Code = "SOS",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SOMALIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Somali Shilling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 216,
                            Code = "ZAR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SOUTH AFRICA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rand",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 217,
                            Code = "SSP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SOUTH SUDAN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "South Sudanese Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 218,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SPAIN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 219,
                            Code = "LKR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SRI LANKA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sri Lanka Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 220,
                            Code = "SDG",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SUDAN (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sudanese Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 221,
                            Code = "SRD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SURINAME",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Surinam Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 222,
                            Code = "NOK",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SVALBARD AND JAN MAYEN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Norwegian Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 223,
                            Code = "SZL",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SWAZILAND",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lilangeni",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 224,
                            Code = "SEK",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SWEDEN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Swedish Krona",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 225,
                            Code = "CHE",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SWITZERLAND",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "WIR Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 226,
                            Code = "CHF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SWITZERLAND",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Swiss Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 227,
                            Code = "CHW",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SWITZERLAND",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "WIR Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 228,
                            Code = "SYP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SYRIAN ARAB REPUBLIC",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Syrian Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 229,
                            Code = "TWD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "TAIWAN (PROVINCE OF CHINA)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Taiwan Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 230,
                            Code = "TJS",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "TAJIKISTAN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Somoni",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 231,
                            Code = "TZS",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "TANZANIA, UNITED REPUBLIC OF",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tanzanian Shilling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 232,
                            Code = "THB",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "THAILAND",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Baht",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 233,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "TIMOR-LESTE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 234,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "TOGO",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 235,
                            Code = "NZD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "TOKELAU",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "New Zealand Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 236,
                            Code = "TOP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "TONGA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pa’anga",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 237,
                            Code = "TTD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "TRINIDAD AND TOBAGO",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Trinidad and Tobago Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 238,
                            Code = "TND",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "TUNISIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tunisian Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 239,
                            Code = "TRY",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "TURKEY",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Turkish Lira",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 240,
                            Code = "TMT",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "TURKMENISTAN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Turkmenistan New Manat",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 241,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "TURKS AND CAICOS ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 242,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "TUVALU",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 243,
                            Code = "UGX",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "UGANDA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Uganda Shilling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 244,
                            Code = "UAH",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "UKRAINE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hryvnia",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 245,
                            Code = "AED",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "UNITED ARAB EMIRATES (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UAE Dirham",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 246,
                            Code = "GBP",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pound Sterling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 247,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "UNITED STATES MINOR OUTLYING ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 248,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "UNITED STATES OF AMERICA (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 249,
                            Code = "USN",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "UNITED STATES OF AMERICA (THE)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar (Next day)",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 250,
                            Code = "UYI",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "URUGUAY",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Uruguay Peso en Unidades Indexadas (URUIURUI)",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 251,
                            Code = "UYU",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "URUGUAY",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Peso Uruguayo",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 252,
                            Code = "UZS",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "UZBEKISTAN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Uzbekistan Sum",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 253,
                            Code = "VUV",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "VANUATU",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vatu",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 254,
                            Code = "VEF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "VENEZUELA (BOLIVARIAN REPUBLIC OF)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bolivar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 255,
                            Code = "VND",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "VIET NAM",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dong",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 256,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "VIRGIN ISLANDS (BRITISH)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 257,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "VIRGIN ISLANDS (U.S.)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 258,
                            Code = "XPF",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "WALLIS AND FUTUNA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CFP Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 259,
                            Code = "MAD",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "WESTERN SAHARA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Moroccan Dirham",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 260,
                            Code = "YER",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "YEMEN",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yemeni Rial",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 261,
                            Code = "ZMW",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ZAMBIA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zambian Kwacha",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 262,
                            Code = "ZWL",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ZIMBABWE",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zimbabwe Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 263,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "ÅLAND ISLANDS",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Euro",
                            Symbol = " "
                        });
                });

            modelBuilder.Entity("MM.ClientModels.CustomField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime1")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime10")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime11")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime12")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime13")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime14")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime15")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime16")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime17")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime18")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime19")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime2")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime20")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime3")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime4")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime5")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime6")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime7")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime8")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime9")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("Decimal1")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal10")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal11")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal12")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal13")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal14")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal15")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal16")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal17")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal18")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal19")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal2")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal20")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal3")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal4")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal5")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal6")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal7")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal8")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal9")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("Int1")
                        .HasColumnType("int");

                    b.Property<int?>("Int10")
                        .HasColumnType("int");

                    b.Property<int?>("Int11")
                        .HasColumnType("int");

                    b.Property<int?>("Int12")
                        .HasColumnType("int");

                    b.Property<int?>("Int13")
                        .HasColumnType("int");

                    b.Property<int?>("Int14")
                        .HasColumnType("int");

                    b.Property<int?>("Int15")
                        .HasColumnType("int");

                    b.Property<int?>("Int16")
                        .HasColumnType("int");

                    b.Property<int?>("Int17")
                        .HasColumnType("int");

                    b.Property<int?>("Int18")
                        .HasColumnType("int");

                    b.Property<int?>("Int19")
                        .HasColumnType("int");

                    b.Property<int?>("Int2")
                        .HasColumnType("int");

                    b.Property<int?>("Int20")
                        .HasColumnType("int");

                    b.Property<int?>("Int3")
                        .HasColumnType("int");

                    b.Property<int?>("Int4")
                        .HasColumnType("int");

                    b.Property<int?>("Int5")
                        .HasColumnType("int");

                    b.Property<int?>("Int6")
                        .HasColumnType("int");

                    b.Property<int?>("Int7")
                        .HasColumnType("int");

                    b.Property<int?>("Int8")
                        .HasColumnType("int");

                    b.Property<int?>("Int9")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup1")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup10")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup11")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup12")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup13")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup14")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup15")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup16")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup17")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup18")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup19")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup2")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup20")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup3")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup4")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup5")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup6")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup7")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup8")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup9")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TableName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TablePrimaryKeyValue")
                        .HasColumnType("int");

                    b.Property<string>("Text1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text10")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text11")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text12")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text13")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text14")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text15")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text16")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text17")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text18")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text19")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text20")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text6")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text7")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text8")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text9")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("CustomField");
                });

            modelBuilder.Entity("MM.ClientModels.CustomFieldLookUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("FieldIndex")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CustomFieldLookUp");
                });

            modelBuilder.Entity("MM.ClientModels.CustomFieldName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DataType")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("FieldIndex")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CustomFieldName");
                });

            modelBuilder.Entity("MM.ClientModels.DWSClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("DWSClass");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Class I"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Class II"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Class III"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Class IV"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ClassV"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Class VI"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.DWSClassMemberXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClassDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("DWSClassId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DWSClassId");

                    b.HasIndex("MemberId");

                    b.ToTable("DWSClassMemberXref");
                });

            modelBuilder.Entity("MM.ClientModels.DateSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("DateSetting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "12/03/2020"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "03/12/2020"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "03.12.2020"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "03-12-2020"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "03 Dec 2020"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "03-Dec-2020"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "2020-12-03"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Friday, December 03, 2020"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fri, December 03, 2020"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "December 03, 2020"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "03 December 2020"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "3 Dec 2020"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Designation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Operations manager",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Operations manager"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quality control, safety, environmental manager",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Quality control, safety, environmental manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Accountant, bookkeeper, controller",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accountant, bookkeeper, controller"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Office manager",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Office manager"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Receptionist",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Receptionist"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Foreperson, supervisor, lead person",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Foreperson, supervisor, lead person"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Marketing manager",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Marketing manager"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Purchasing manager",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Purchasing manager"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Shipping and receiving person or manager",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Shipping and receiving person or manager"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Professional staff",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Professional staff"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Production Manager",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Production Manager"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chief Financial Officer (CFO)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chief Financial Officer (CFO)"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Vice President of Marketing or Marketing Manager",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vice President of Marketing or Marketing Manager"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chief Operating Officer (COO)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chief Operating Officer (COO)"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Chief Executive Officer (CEO) or President",
                            Name = "Chief Executive Officer (CEO) or President"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Disability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Disability");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hearing"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Communication"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Seeing"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Walking"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Self-care"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Remembering"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.DisabilityLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("DisabilityLevel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "No Difficulty"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Some Difficulty"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "A lot of Difficulty"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cannot do at all"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cannot yet be determined"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.DisabilityMemberXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("DisabilityId")
                        .HasColumnType("int");

                    b.Property<int?>("DisabilityLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DisabilityId");

                    b.HasIndex("DisabilityLevelId");

                    b.HasIndex("MemberId");

                    b.ToTable("DisabilityMemberXref");
                });

            modelBuilder.Entity("MM.ClientModels.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Division");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Anaerobic Sludge Processes"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Community Water Supply and Sanitation"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Industrial Water"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Innovations in Water & Sanitation"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "IWA-SA"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Management & Institutional Affairs"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Membrane Technology"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mine Water"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Process Controllers"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Small Wastewater Treatment Works"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Water Distribution"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Water Reuse"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Water Science"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Community Water Supply and Sanitation"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Young Water Professionals"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.DivisionMemberXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("DivisonId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DivisonId");

                    b.HasIndex("MemberId");

                    b.ToTable("DivisionMemberXref");
                });

            modelBuilder.Entity("MM.ClientModels.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DonatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DonorNotes")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("PromotionDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PromotionDetailId");

                    b.ToTable("Donation");
                });

            modelBuilder.Entity("MM.ClientModels.EmailCcrule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EmailTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailTypeId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmailCCRule");
                });

            modelBuilder.Entity("MM.ClientModels.EmailTemplateContent", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailContent")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<int>("EmailTemplateNameId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EmailTemplateNameId");

                    b.ToTable("EmailTemplateContent");
                });

            modelBuilder.Entity("MM.ClientModels.EmailTemplateName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EmailTemplateName");
                });

            modelBuilder.Entity("MM.ClientModels.EmailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EmailType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Personal E-mail",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Personal"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Work E-mail",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Work"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Business E-mail",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Business"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.EmploymentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("EmploymentCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Current Employer"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Previous Employer"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.EmploymentMemberXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CompanyTelephoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Designation")
                        .HasColumnType("varchar(120) CHARACTER SET utf8mb4")
                        .HasMaxLength(120);

                    b.Property<string>("EmployerName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("EmploymentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MemberUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("YourDuties")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2500);

                    b.HasKey("Id");

                    b.HasIndex("EmploymentCategoryId");

                    b.HasIndex("MemberUserId");

                    b.ToTable("EmploymentMemberXref");
                });

            modelBuilder.Entity("MM.ClientModels.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("MM.ClientModels.EquipmentCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvailableCount")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("EquipmentCount");
                });

            modelBuilder.Entity("MM.ClientModels.Ethnicity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Ethnicity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Black",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Black"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "White",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "White"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Indian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Indian"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Coloured",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Coloured"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Asian",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Asian"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Other",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<bool>("AllowCancellations")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("AllowGuestRegistrations")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowRegistration")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CancellationbeforeDays")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(2)");

                    b.Property<string>("EventUniqueName")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<int?>("GuestLimitPerRegistrant")
                        .HasColumnType("int");

                    b.Property<bool>("InternalOrExternal")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsChargableEvent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCpdevent")
                        .HasColumnName("IsCPDEvent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxRegistrationsAllowed")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegEndDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("RegEndTime")
                        .HasColumnType("time(2)");

                    b.Property<DateTime>("RegStartDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("RegStartTime")
                        .HasColumnType("time(2)");

                    b.Property<bool>("ShowMaxRegistrationsAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(2)");

                    b.Property<int>("TimeZoneId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("MM.ClientModels.EventAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("AdminOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Anyone")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("RestrictedList")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventAccess");
                });

            modelBuilder.Entity("MM.ClientModels.EventAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("SignInTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("SingOutTime")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.ToTable("EventAttendance");
                });

            modelBuilder.Entity("MM.ClientModels.EventCommunication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Announcement1ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Announcement1Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Announcement1SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Announcement2ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Announcement2Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Announcement2SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Announcement3ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Announcement3Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Announcement3SentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder1ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder1Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder1SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder2ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder2Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder2SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder3ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder3Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder3SentDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventCommunication");
                });

            modelBuilder.Entity("MM.ClientModels.EventCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventCostItemId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EventCostItemId");

                    b.HasIndex("EventId");

                    b.ToTable("EventCost");
                });

            modelBuilder.Entity("MM.ClientModels.EventCostItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventCostItem");
                });

            modelBuilder.Entity("MM.ClientModels.EventEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RequiredCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("EventId");

                    b.ToTable("EventEquipment");
                });

            modelBuilder.Entity("MM.ClientModels.EventMinute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Heading")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Minute")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("MinuteStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RaisedBy")
                        .HasColumnType("int");

                    b.Property<string>("SubHeading")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MinuteStatusId");

                    b.ToTable("EventMinute");
                });

            modelBuilder.Entity("MM.ClientModels.EventMinuteStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EventMinuteStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Under preperation",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "In-Progress"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Prepared & awaiting approval",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Prepared"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Approved",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Shared with concerned people",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Shared"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.EventPreRequisiteEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PreRequisiteEventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PreRequisiteEventId");

                    b.ToTable("EventPreRequisiteEvent");
                });

            modelBuilder.Entity("MM.ClientModels.EventRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("EventResponseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<bool>("Paid")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventResponseTypeId");

                    b.HasIndex("MemberId");

                    b.ToTable("EventRegistration");
                });

            modelBuilder.Entity("MM.ClientModels.EventResponseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("EventResponseType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Organizer"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sponsor"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Facilitator"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.EventRestrictionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberLevelId");

                    b.HasIndex("MemberTeamId");

                    b.ToTable("EventRestrictionList");
                });

            modelBuilder.Entity("MM.ClientModels.EventRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventRole");
                });

            modelBuilder.Entity("MM.ClientModels.EventRoleUserXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int>("EventRoleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("EventRoleUserXRef");
                });

            modelBuilder.Entity("MM.ClientModels.FileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("FileType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ID Document"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Certificates (Completed Qualifications)"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Proof of DWS Registration (If Applicable)"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Proof of Registration ( If fulltime Student)"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Proof of Payment"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Note"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "StudentLetter"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Male",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Female",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Female"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Other",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.IndividualMemberShipHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCurrentPlan")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberShipChangeReasonId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberShipGradeId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("MembershipTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberShipChangeReasonId");

                    b.HasIndex("MemberShipGradeId");

                    b.HasIndex("MemberStatusId");

                    b.HasIndex("MembershipTypeId");

                    b.ToTable("IndividualMemberShipHistory");
                });

            modelBuilder.Entity("MM.ClientModels.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommentsForPayer")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InvoiceItem")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("InvoiceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentGatewayId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceStatusId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PaymentGatewayId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("MM.ClientModels.InvoiceSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CopyInvToOrgContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CopyRecToOrgContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("NextInvoiceNumber")
                        .HasColumnType("int");

                    b.Property<bool>("SendInvForPendingPayments")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SendRecToPayer")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceSetting");
                });

            modelBuilder.Entity("MM.ClientModels.InvoiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("InvoiceStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Incomplete Invoice",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Draft"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Send to Member",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Send"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Viewed by member",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Viewed"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Due for payment",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Due"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Outstanding payment",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Overdue"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Payment made",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Paid"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Partial payment",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Partial"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Incorrect / Dispute Invoice",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Void"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Canceled Invoice",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Canceled"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Uncollectible Invoice",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Write Off"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Involvement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(400) CHARACTER SET utf8mb4")
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("Involvement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Branch/Division Committee member"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Logistics"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Promotions and Marketing"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Writing articles for publication in WISA and main stream media"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Being a mentor and/or specialist advisor"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Visit schools and universities to promote WISA"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Visit businesses and government departments to promote WISA"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Man a \"membership desk or exhibition stand\" at WISA events hosted by other parties in the water sector to promote WISA membership and answer enquiries regarding WISA "
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Community outreach projects"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Media mentor - reporting to WISA HQ all the news that is relevant to the Water sector and that needs our attention "
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Assist in obtaining sponsorship "
                        });
                });

            modelBuilder.Entity("MM.ClientModels.InvolvementMemberXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("InvolvementId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("InvolvementId");

                    b.HasIndex("MemberId");

                    b.ToTable("InvolvementMemberXref");
                });

            modelBuilder.Entity("MM.ClientModels.LandingPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberShipGradeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberShipGradeId");

                    b.HasIndex("PageId");

                    b.ToTable("LandingPage");
                });

            modelBuilder.Entity("MM.ClientModels.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "English",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "English"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Afrikaans",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Afrikaans"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "seSotho",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "seSotho"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "seTswana",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "seTswana"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "tshiVenda",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "tshiVenda"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "isiZulu",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "isiZulu"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "isiNdebele",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "isiNdebele"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "isiTsonga",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "isiTsonga"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Other",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Other"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "isiXhosa",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "isiXhosa"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "sePedi",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "sePedi"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SiSwati",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SiSwati"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.MarketingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MarketingGroup");
                });

            modelBuilder.Entity("MM.ClientModels.MarketingGroupXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MarketingGroupId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MarketingGroupId");

                    b.HasIndex("MemberId");

                    b.ToTable("MarketingGroupXRef");
                });

            modelBuilder.Entity("MM.ClientModels.MarketingProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MarketingProfile");
                });

            modelBuilder.Entity("MM.ClientModels.MarketingProfileXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MarketingProfileId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MarketingProfileId");

                    b.HasIndex("MemberId");

                    b.ToTable("MarketingProfileXRef");
                });

            modelBuilder.Entity("MM.ClientModels.MemberActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ActivityDetail")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MemberActivity");
                });

            modelBuilder.Entity("MM.ClientModels.MemberAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BuidlingName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ComplexName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Gpscoordinates")
                        .HasColumnName("GPSCoordinates")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PrimaryContactNo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PrimaryEmail")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("SecondaryContactNo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("MemberId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("MemberAddress");
                });

            modelBuilder.Entity("MM.ClientModels.MemberAffliationXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("AffliatedFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AffliatedTill")
                        .HasColumnType("datetime");

                    b.Property<int?>("AffliationId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool?>("IsActiveAffliatedNow")
                        .HasColumnName("isActiveAffliatedNow")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("MemberNumber")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("MemberSpecificAffliationName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AffliationId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberAffliationXRef");
                });

            modelBuilder.Entity("MM.ClientModels.MemberBankingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("RoutingCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberBankingDetail");
                });

            modelBuilder.Entity("MM.ClientModels.MemberBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MemberBranch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Central Regions"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eastern Cape"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gauteng"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "International"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KwaZulu Natal"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Limpopo"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mpumalanga"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Western Cape"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Free State"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Head Office"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "North West"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Northern Cape"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Johannesburg"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.MemberCodeGenerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodeGenerationRule")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("LastNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Prefix")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Suffix")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("MemberCodeGenerator");
                });

            modelBuilder.Entity("MM.ClientModels.MemberCommunicationPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CommunicationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("PreferredTimeFrom")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan?>("PreferredTimeTo")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationTypeId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberCommunicationPreference");
                });

            modelBuilder.Entity("MM.ClientModels.MemberEmailXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BCC")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<string>("CC")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("From")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedToId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("To")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RelatedToId");

                    b.ToTable("MemberEmailXref");
                });

            modelBuilder.Entity("MM.ClientModels.MemberFileXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FileExtension")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FileName")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<string>("FilePath")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("Text");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedToId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("MemberUserId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("MemberFileXref");
                });

            modelBuilder.Entity("MM.ClientModels.MemberLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MemberLevel");
                });

            modelBuilder.Entity("MM.ClientModels.MemberLoginAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LoginTime")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MemberLoginAudit");
                });

            modelBuilder.Entity("MM.ClientModels.MemberNotesXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("Text");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedToId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("RelatedToId");

                    b.ToTable("MemberNotesXref");
                });

            modelBuilder.Entity("MM.ClientModels.MemberPlanHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCurrentPlan")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("MemberPlanDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberPlanDetailId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("MemberPlanHistory");
                });

            modelBuilder.Entity("MM.ClientModels.MemberQualificationXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("InstituteName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("MemberSpecificQualificationName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("QualificationCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("QualificationEnrolmentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("QualificationFrom")
                        .HasColumnType("datetime");

                    b.Property<int?>("QualificationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("QualificationTill")
                        .HasColumnType("datetime");

                    b.Property<int?>("QualificationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("QualificationCategoryId");

                    b.HasIndex("QualificationEnrolmentCategoryId");

                    b.HasIndex("QualificationId");

                    b.HasIndex("QualificationTypeId");

                    b.ToTable("MemberQualificationXRef");
                });

            modelBuilder.Entity("MM.ClientModels.MemberRefereeXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CellPhone")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Initials")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("NameOfEmployer")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("PositionOfReferree")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ProfessionalRegistrationNumber")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedToId")
                        .HasColumnType("int");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("RelatedToId");

                    b.ToTable("MemberRefereeXref");
                });

            modelBuilder.Entity("MM.ClientModels.MemberShipChangeReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MemberShipChangeReason");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Application Cancelled"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Applicant"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Active"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deceased"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Resigned"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Suspended – account in arrears"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Suspended"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Upgrade"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Change"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Inactive-Resigned"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Inactive-Suspended"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Inactive-Deceased"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.MemberShipGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("IndividualOrNonIndividualId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MembershipGrade");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Professional Process Controller"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Member"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Affiliate"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Associate Member"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Academic Member"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fellow"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Senior Fellow"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Student Member"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Free Retired"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Honorary Member"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Media Member"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Retired Fellow"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Retired Member"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Retired Sen. Fellow"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Company Member"
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Educational Institutions"
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Patron Member"
                        },
                        new
                        {
                            Id = 18,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Professional Members Association"
                        },
                        new
                        {
                            Id = 19,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Non-Individual Member"
                        },
                        new
                        {
                            Id = 20,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Local Authority"
                        },
                        new
                        {
                            Id = 21,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Municipality"
                        },
                        new
                        {
                            Id = 22,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IndividualOrNonIndividualId = 0,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Contact"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.MemberStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MemberStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Application Cancelled"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Applicant"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Active"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deceased"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Resigned"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Suspended"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.MemberTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MemberTeam");
                });

            modelBuilder.Entity("MM.ClientModels.MemberUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal?>("AccountBalanceOftheCompany")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Accountbalanceofthecompany_base")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool?>("AdminFee")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("AdminFeeProofofpaymentReceivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("AdminfeePaymentReceivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("AdminfeeProofofpaymentSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("AmountWrittenOff")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ApplicaitonUserId")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ApplicationCancelledMemberfeeNotpaidDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("ApplicationFormComplete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ApplicationreceivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BusinessPhoneNumber")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CancelapplicationNopayDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CertificateAndwelcomeLetterEmailedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("CertificateUploaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ClientBranchId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CompanyName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("CompanyPhoneNumber2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CompanyPostalCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateWrittenOff")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DebtPaymentReceived")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("DoNotEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("DoNotSMS")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("DonotBulkEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("DonotBulkPostalMail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("DonotFax")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("DonotPhone")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("DonotSendMassMarketing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("DonotpostalMail")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DwsProcessControllerRegistrationName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("DwscertificAteattached")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("EmployerAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EthnicityId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ExistingMembershipId")
                        .HasColumnType("int");

                    b.Property<string>("FAXNumber")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("FaxToEmail")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool?>("FirstReminderSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("FollowEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("GradingCompletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("HighestQualitificationId")
                        .HasColumnType("int");

                    b.Property<int?>("HomeLanguageId")
                        .HasColumnType("int");

                    b.Property<string>("HomePhoneNumber")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool?>("IDAttached")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IDNumber")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Initials")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool?>("InterestedInVolunteerWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("InvoiceSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsBillingContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsBranchContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsPrivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("varchar(120) CHARACTER SET utf8mb4")
                        .HasMaxLength(120);

                    b.Property<DateTime?>("LastUsedInCampaignDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MemberBranchId")
                        .HasColumnType("int");

                    b.Property<string>("MemberCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("MemberLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberTeamId")
                        .HasColumnType("int");

                    b.Property<bool?>("MembershipFeeInvoicedToCompany")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MembershipGradeId")
                        .HasColumnType("int");

                    b.Property<int?>("MembershipTypeId")
                        .HasColumnType("int");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("New_Check")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("Text");

                    b.Property<int?>("OccupationId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("OrganizationStructureId")
                        .HasColumnType("int");

                    b.Property<string>("OriginalSystemRecordId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("OwnerClientUserId")
                        .HasColumnType("int");

                    b.Property<string>("ParentMemberName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ParentMemberid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentReminder1Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PaymentReminder2Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PaymentReminder3Date")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("blob");

                    b.Property<string>("PostCertificateTracking")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("PostingofCertificateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PreferredAppointmentTimeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProformaInvoiceEmailedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ProformaInvoiceSentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("ProofOfPaymentUploaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("ProofOfRegistrationAttached")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("ProofofPaymentReceived")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ProofofPaymentReceivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("PublishCompanyInAnnualMemberDirectory")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("QualificationAttached")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RefereeReport")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ReferralOther")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ReferralTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Request1Debt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Request2Debt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Request2MemberFee")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Request3Debt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Request3MemberFee")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("SecondReminderSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("SentforGradingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("SpecialMember")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("TaxInvoicEemailedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("TaxInvoiceSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("TermAccepted")
                        .IsRequired()
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("ThirdReminderSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("TotalCDPPoints")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TotalCdpPointsCalculatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("TotalCdppoints_State")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("TransactionCurrencyid")
                        .HasColumnType("int");

                    b.Property<string>("VATNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("VolunteerWorkHoursId")
                        .HasColumnType("int");

                    b.Property<bool>("isApplicationCompleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicaitonUserId");

                    b.HasIndex("ClientBranchId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("HighestQualitificationId");

                    b.HasIndex("HomeLanguageId");

                    b.HasIndex("MemberBranchId");

                    b.HasIndex("MemberLevelId");

                    b.HasIndex("MemberStatusId");

                    b.HasIndex("MemberTeamId");

                    b.HasIndex("MembershipGradeId");

                    b.HasIndex("MembershipTypeId");

                    b.HasIndex("OccupationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationStructureId");

                    b.HasIndex("OwnerClientUserId");

                    b.HasIndex("ParentMemberid");

                    b.HasIndex("PreferredAppointmentTimeId");

                    b.HasIndex("ReferralTypeId");

                    b.HasIndex("TransactionCurrencyid");

                    b.HasIndex("VolunteerWorkHoursId");

                    b.ToTable("MemberUser");
                });

            modelBuilder.Entity("MM.ClientModels.MembershipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MembershipType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Individual Member",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Individual Member"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Professional Process Controller",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Professional Process Controller"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Non Individual Member",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Non Individual Member"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Non Members",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Non Members"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Primary Contact",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Primary Contact"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Billing Contact",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Billing Contact"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Contact Person",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Contact Person"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Additional Contacts",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Additional Contacts"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Occupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Occupation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Unemployed"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Retired – not working"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Full time student"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Academic"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Researcher"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Scientist"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Engineer"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Practitioner"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Technician"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Director / Manager (in water industry)"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Director / Manager (not in the water industry)"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Process Controller"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Self Employed"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Consultant"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal?>("AccountBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AccountBalanceBase")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("AdminfeePaymentReceivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("AmountDueAsAtDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("AmountWrittenOff")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("ApplicationCancelledMemberfeeNotpaidDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ApplicationReceivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("BillingContactId")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CancelapplicationNopayDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CertificateAndwelcomeLetterEmailedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ClientBranchId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactPersonId")
                        .HasColumnType("int");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DatetWrittenOff")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("GradingCompletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsAdminFeePaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsAdminfeeProofofpaymentSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsApplicationFormComplete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsCertificatePosted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsCertificateUploaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsCreditOnHold")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsInvoiceSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsMemberfeeProofofpaymentSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsMembershipFeeInvoicedToCompany")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTermAccepted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsmemberFeePaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MemberLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberShipGradeId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MemberfeePaymentReceivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Notes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrgMemberCode")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<int?>("OrganizationGradeId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("OriginalSystemRecordId")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("OwnerClientUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentReminder1Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PaymentReminder2Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PaymentReminder3Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PostCertificateTracking")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("PostingofCertificateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PrimaryContactId")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryContactName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("ProformaInvoiceEmailedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("ProofOfpaymentReceivedandUploaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ProofofPaymentReceivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("PublishCompanyInAnnualMemberDirectory")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Request2MemberFee")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Request3MemberFee")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecondaryPhoneNumber")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("SentforGradingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ShortName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("TaxInvoicEmailedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("TransactionCurrencyid")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("BillingContactId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("ClientBranchId");

                    b.HasIndex("ContactPersonId");

                    b.HasIndex("MemberLevelId");

                    b.HasIndex("MemberShipGradeId");

                    b.HasIndex("MemberStatusId");

                    b.HasIndex("OrganizationGradeId");

                    b.HasIndex("OrganizationTypeId");

                    b.HasIndex("PrimaryContactId");

                    b.HasIndex("TransactionCurrencyid");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("MM.ClientModels.OrganizationBusinessXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationBusinessXref");
                });

            modelBuilder.Entity("MM.ClientModels.OrganizationGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("OrganizationGrade");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Association - Business / Trade",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Municipality"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Association - Chamber of commerce",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Company Member"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Association - Community / HOA",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Educational Institutions"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Association - Professional",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Media Member"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Association - Health",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Patron Member"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Association - Business / Trade",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Professional Members Association"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Water Board",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Water Board"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Local Authority",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Local Authority"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.OrganizationMemberShipHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCurrentPlan")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MemberShipChangeReasonId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("OrganizationGradeId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MemberShipChangeReasonId");

                    b.HasIndex("MemberStatusId");

                    b.HasIndex("OrganizationGradeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationTypeId");

                    b.ToTable("OrganizationMemberShipHistory");
                });

            modelBuilder.Entity("MM.ClientModels.OrganizationStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("LevelOfMember")
                        .HasColumnType("int");

                    b.Property<int>("MaximumNumber")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumTimeInYears")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool?>("ShowMaximumTimeInYears")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("OrganizationStructure");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Executive",
                            LevelOfMember = 3,
                            MaximumNumber = 3,
                            MaximumTimeInYears = 2,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Executive",
                            ShowMaximumTimeInYears = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Manager",
                            LevelOfMember = 2,
                            MaximumNumber = 10,
                            MaximumTimeInYears = 3,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Manager",
                            ShowMaximumTimeInYears = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Associate",
                            LevelOfMember = 1,
                            MaximumNumber = 100,
                            MaximumTimeInYears = 5,
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Associate",
                            ShowMaximumTimeInYears = true
                        });
                });

            modelBuilder.Entity("MM.ClientModels.OrganizationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("OrganizationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Private"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Non-Individual Member"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Water Service Provider"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Municipality"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Professional Member Association"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Government Department"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Educational Institution"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("MM.ClientModels.PayPalConnectionMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PayPalConnectionMode");
                });

            modelBuilder.Entity("MM.ClientModels.PayPalPreferredPaymentGateway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PayPalPreferredPaymentGateway");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Pay Flow Gateway",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pay Flow"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Paypal Payments Pro",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Paypal Payments Pro"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.PaymentCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PaymentCard");
                });

            modelBuilder.Entity("MM.ClientModels.PaymentGateway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClientApicodeForMerchant")
                        .HasColumnName("ClientAPICodeForMerchant")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ClientIdForMerchant")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ClientPasswordForMerchant")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<decimal?>("CommisionPercentage")
                        .HasColumnType("decimal(6, 3)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("MerchantLocation")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("MerchantName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("MerchantNumber")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PaymentGateway");
                });

            modelBuilder.Entity("MM.ClientModels.PaymentSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationInstructions")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<int?>("ClientPayPalConnectionModeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultCountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("EventsInstructions")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("GeneralInstructions")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("PayPalAccountId")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("PayPalApipassword")
                        .HasColumnName("PayPalAPIPassword")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PayPalApisignature")
                        .HasColumnName("PayPalAPISignature")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("PayPalApiuserName")
                        .HasColumnName("PayPalAPIUserName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PayPalPdtidentityToken")
                        .HasColumnName("PayPalPDTIdentityToken")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("PayPalPreferredPaymentGatewayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("PaymentSetting");
                });

            modelBuilder.Entity("MM.ClientModels.PaymentSettingAllowedCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentCardId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentSettingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentCardId");

                    b.HasIndex("PaymentSettingId");

                    b.ToTable("PaymentSettingAllowedCard");
                });

            modelBuilder.Entity("MM.ClientModels.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Can create new contacts, modify all existing ones  ",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Membership manager"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Can create and manage all events",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Event manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Can manage all donations",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Donations manager"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Can send manual emails (e.g. newsletters)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Newsletter manager"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Can modify your website pages. With this option selected, you can provide access to all pages on your site or to selected pages. When you grant access to a page, you automatically grant access to all of its child or sub pages.",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Website editor"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.PlanCanChangeToXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("FromPlanMasterId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("ToPlanMasterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromPlanMasterId");

                    b.HasIndex("ToPlanMasterId");

                    b.ToTable("PlanCanChangeToXref");
                });

            modelBuilder.Entity("MM.ClientModels.PlanDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PlanFrequencyId")
                        .HasColumnType("int");

                    b.Property<int>("PlanMasterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PlanFrequencyId");

                    b.HasIndex("PlanMasterId");

                    b.ToTable("PlanDetail");
                });

            modelBuilder.Entity("MM.ClientModels.PlanFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PlanFrequency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Daily",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Daily"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Weekly",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Weekly"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Monthly",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Monthly"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quarterly",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Quarterly"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yearly",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yearly"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Life Time",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Life Time"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.PlanMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ApplyTaxSettings")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanPublicApply")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool?>("IsLimited")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LimitToMemberCount")
                        .HasColumnType("int");

                    b.Property<int>("MembershipTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MembershipTypeId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("PlanMaster");
                });

            modelBuilder.Entity("MM.ClientModels.PreferredContactTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PreferredContactTime");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Morning",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Morning"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Day",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Day"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Evenings",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Evenings"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.PromotionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(9, 3)");

                    b.Property<int?>("MemberLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("MembershipGradeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PromotionMasterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberLevelId");

                    b.HasIndex("MembershipGradeId");

                    b.HasIndex("PromotionMasterId");

                    b.ToTable("PromotionDetail");
                });

            modelBuilder.Entity("MM.ClientModels.PromotionMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BenefitEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("BenefitStartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("RelatedToId");

                    b.ToTable("PromotionMaster");
                });

            modelBuilder.Entity("MM.ClientModels.PromotionResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PromotionMasterId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionResponseType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PromotionMasterId");

                    b.HasIndex("PromotionResponseType");

                    b.ToTable("PromotionResponse");
                });

            modelBuilder.Entity("MM.ClientModels.PromotionResponseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("PromotionResponseType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Call"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Email"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SMS"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Qualification");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Matric/Grade 12"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1 year diploma/certificate"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "3 year diploma/degree"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "4 year degree"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Postgraduate diploma"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Honours degree"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Master’s degree"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dr/PHD degree"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.QualificationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("QualificationCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Current Studies"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Completed Qualifications"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.QualificationEnrolmentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("QualificationEnrolmentCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "FullTime"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PartTime"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.QualificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("QualificationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Matric/Grade 12"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1 year diploma/certificate"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "3 year diploma/degree"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "4 year degree"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Postgraduate diploma"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Honours degree"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Master’s degree"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dr/PHD degree"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.ReferralType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ReferralType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Word of Mouth",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Word of Mouth."
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "WISA NewsLetter",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "WISA NewsLetter"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "WISA WebSite",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "WISA Website"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "WISA Event (Conference, Branch or Division Event)",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "WISA Event (Conference, Branch or Division Event)"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Other",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Refund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommentsForPayer")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentGatewayId")
                        .HasColumnType("int");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RefundItem")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PaymentGatewayId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("Refund");
                });

            modelBuilder.Entity("MM.ClientModels.RelatedTo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("RelatedTo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Member",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Member"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Organization",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Organization"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Event",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Event"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "CPD",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CPD"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Contact",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Contact"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Staff",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Staff"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Note",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Note"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Select this option to remove admin access for existing administrators  ",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "No administrative privileges"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Grants full access to all administrative functions. Take care when granting this level of access since full admins can delete other admins and even the entire site.",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Account administrator"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Allows viewing of everything in the admin backend without being able to make any changes.  ",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Account administrator (Read-only access)"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Provides administrative access to selected Wild Apricot modules. Use this option if you have dedicated personnel in charge of events, memberships, editing webpages, or managing donations. With this option selected, you can limit access to selected Functions",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Limited administrator"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.RolePermissionXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("Permissionid")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Permissionid");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissionXRef");
                });

            modelBuilder.Entity("MM.ClientModels.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eastern Cape"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Free State"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gauteng"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "KwaZulu-Natal"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Limpopo"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mpumalanga"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "North West"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Northern Cape"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Western Cape"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("MM.ClientModels.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tax");
                });

            modelBuilder.Entity("MM.ClientModels.TaxPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TaxPolicy");
                });

            modelBuilder.Entity("MM.ClientModels.TaxScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("TaxScopeCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TaxScope");
                });

            modelBuilder.Entity("MM.ClientModels.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("ThemeNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Theme");
                });

            modelBuilder.Entity("MM.ClientModels.TimeFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TimeFormat");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "12:00 AM/PM"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "24 Hours"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Title");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mr"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mrs"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ms"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dr"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Prof"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Adv"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sr"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fr"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.UserActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ActivityDetail")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("UserActivity");
                });

            modelBuilder.Entity("MM.ClientModels.UserRoleXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleXRef");
                });

            modelBuilder.Entity("MM.ClientModels.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("UserType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Admin",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Member",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Member"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Contact",
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Contact"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.VolunteerHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("VolunteerHours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1-5  hours per week"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "6-10  hours per week"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "11-15 hours per week"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(2020, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "16-20 hours per week"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasMaxLength(50);

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasMaxLength(50);

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MM.ClientModels.Address", b =>
                {
                    b.HasOne("MM.ClientModels.AddressType", "AddressType")
                        .WithMany("Address")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("FK_Address_AddressType");

                    b.HasOne("MM.ClientModels.City", "City")
                        .WithMany("Address")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Address_City");

                    b.HasOne("MM.ClientModels.Country", "Country")
                        .WithMany("Address")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Address_Country");

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("Address")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_Address_RelatedTo");

                    b.HasOne("MM.ClientModels.State", "State")
                        .WithMany("Address")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Address_State");
                });

            modelBuilder.Entity("MM.ClientModels.ApplicationUser", b =>
                {
                    b.HasOne("MM.ClientModels.Gender", "Gender")
                        .WithMany("User")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_User_Gender");

                    b.HasOne("MM.ClientModels.Title", "Title")
                        .WithMany("User")
                        .HasForeignKey("TitleId")
                        .HasConstraintName("FK_User_Title");

                    b.HasOne("MM.ClientModels.UserType", "UserType")
                        .WithMany("User")
                        .HasForeignKey("UserTypeId")
                        .HasConstraintName("FK_User_UserType")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.BankingDetail", b =>
                {
                    b.HasOne("MM.ClientModels.AccountType", "AccountType")
                        .WithMany("BankingDetail")
                        .HasForeignKey("AccountTypeId")
                        .HasConstraintName("FK_BankingDetail_AccountType")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Billing", b =>
                {
                    b.HasOne("MM.ClientModels.Invoice", "Invoice")
                        .WithMany("Billing")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_Payment_Invoice");

                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("Billing")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Payment_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PaymentGateway", "PaymentGateway")
                        .WithMany("Billing")
                        .HasForeignKey("PaymentGatewayId")
                        .HasConstraintName("FK_Payment_PaymentGateway")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("Billing")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_Billing_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.BillingCommunication", b =>
                {
                    b.HasOne("MM.ClientModels.Billing", "Billing")
                        .WithOne("BillingCommunication")
                        .HasForeignKey("MM.ClientModels.BillingCommunication", "Id")
                        .HasConstraintName("FK_PaymentCommunication_Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.City", b =>
                {
                    b.HasOne("MM.ClientModels.State", "State")
                        .WithMany("City")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_City_State");
                });

            modelBuilder.Entity("MM.ClientModels.ClientOrganization", b =>
                {
                    b.HasOne("MM.ClientModels.ClientOrganizationType", "ClientOrganizationType")
                        .WithMany("ClientOrganization")
                        .HasForeignKey("ClientOrganizationTypeId")
                        .HasConstraintName("FK_ClientOrganization_ClientOrganizationType");

                    b.HasOne("MM.ClientModels.ClientTimeZone", "ClientTimeZone")
                        .WithMany("Client")
                        .HasForeignKey("ClientTimeZoneId")
                        .HasConstraintName("FK_Client_TimeZone");

                    b.HasOne("MM.ClientModels.Currency", "Currency")
                        .WithMany("Client")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_Client_Currency");

                    b.HasOne("MM.ClientModels.DateSetting", "DateSetting")
                        .WithMany("Client")
                        .HasForeignKey("DateSettingId")
                        .HasConstraintName("FK_Client_DateSetting");

                    b.HasOne("MM.ClientModels.TimeFormat", "TimeFormat")
                        .WithMany("Client")
                        .HasForeignKey("TimeFormatId")
                        .HasConstraintName("FK_Client_TimeFormat");
                });

            modelBuilder.Entity("MM.ClientModels.ClientPlanHistory", b =>
                {
                    b.HasOne("MM.ClientModels.ClientUser", "BillingUser")
                        .WithMany("ClientPlanHistory")
                        .HasForeignKey("BillingUserId")
                        .HasConstraintName("FK_ClientPlanHistory_User")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.ClientUser", b =>
                {
                    b.HasOne("MM.ClientModels.ApplicationUser", "ApplicationUser")
                        .WithMany("ClientUser")
                        .HasForeignKey("ApplicaitonUserId")
                        .HasConstraintName("FK_Member_ClientUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Designation", "Designation")
                        .WithMany("User")
                        .HasForeignKey("DesignationId")
                        .HasConstraintName("FK_User_Designation");

                    b.HasOne("MM.ClientModels.ReferralType", "ReferralType")
                        .WithMany("User")
                        .HasForeignKey("ReferralTypeId")
                        .HasConstraintName("FK_User_ReferralType");

                    b.HasOne("MM.ClientModels.Role", null)
                        .WithMany("User")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("MM.ClientModels.CommunicationPreference", b =>
                {
                    b.HasOne("MM.ClientModels.CommunicationType", "CommunicationType")
                        .WithMany("CommunicationPreference")
                        .HasForeignKey("CommunicationTypeId")
                        .HasConstraintName("FK_CommunicationPreference_CommunicationType")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.ContactUs", b =>
                {
                    b.HasOne("MM.ClientModels.ClientUser", "ActionedByUser")
                        .WithMany("ContactUs")
                        .HasForeignKey("ActionedByUserId")
                        .HasConstraintName("FK_ContactUs_ClientUser");

                    b.HasOne("MM.ClientModels.ContactUsRelatedTo", "ContactUsRelatedTo")
                        .WithMany("ContactUs")
                        .HasForeignKey("ContactUsRelatedToId")
                        .HasConstraintName("FK_ContactUs_ContactUsRelatedTo");
                });

            modelBuilder.Entity("MM.ClientModels.Cpd", b =>
                {
                    b.HasOne("MM.ClientModels.ClientUser", "CpdawardedBy")
                        .WithMany("Cpd")
                        .HasForeignKey("CpdawardedById")
                        .HasConstraintName("FK_CPD_User")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("Cpd")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_CPD_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("Cpd")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_CPD_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.CpdMemberShipGradeSetUp", b =>
                {
                    b.HasOne("MM.ClientModels.MemberShipGrade", "MembershipGrade")
                        .WithMany("CPDMembershipGradeSetUp")
                        .HasForeignKey("MembershipGradeId")
                        .HasConstraintName("FK_CPDMembershipGradeSetUp_MembershipGrade");

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("CPDMembershipGradeSetUp")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_CPDMembershipGradeSetUp_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberLevelSetUp", b =>
                {
                    b.HasOne("MM.ClientModels.MemberLevel", "MemberLevel")
                        .WithMany("CpdmemberLevelSetUp")
                        .HasForeignKey("MemberLevelId")
                        .HasConstraintName("FK_CPDMemberLevelSetUp_MemberLevel");

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("CpdmemberLevelSetUp")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_CPDMemberLevelSetUp_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberTeamSetUp", b =>
                {
                    b.HasOne("MM.ClientModels.MemberTeam", "MemberTeam")
                        .WithMany("CpdmemberTeamSetUp")
                        .HasForeignKey("MemberTeamId")
                        .HasConstraintName("FK_CPDMemberTeamSetUp_MemberTeam");

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("CpdmemberTeamSetUp")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_CPDMemberTeamSetUp_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.CpdmembershipTypeSetUp", b =>
                {
                    b.HasOne("MM.ClientModels.MembershipType", "MembershipType")
                        .WithMany("CPDMembershipTypeSetUp")
                        .HasForeignKey("MembershipTypeId")
                        .HasConstraintName("FK_CPDMembershipTypeSetUp_MembershipType");

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("CPDMembershipTypeSetUp")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_CPDMembershipTypeSetUp_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.DWSClassMemberXref", b =>
                {
                    b.HasOne("MM.ClientModels.DWSClass", "DWSClass")
                        .WithMany("DWSClassMemberXref")
                        .HasForeignKey("DWSClassId")
                        .HasConstraintName("FK_DWSClassMemberXref_DWSClass");

                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("DWSClassMemberXref")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_DWSClassMemberXref_Member");
                });

            modelBuilder.Entity("MM.ClientModels.DisabilityMemberXref", b =>
                {
                    b.HasOne("MM.ClientModels.Disability", "Disability")
                        .WithMany("DisabilityMemberXref")
                        .HasForeignKey("DisabilityId")
                        .HasConstraintName("FK_DisabilityMemberXref_Disability");

                    b.HasOne("MM.ClientModels.DisabilityLevel", "DisabilityLevel")
                        .WithMany("DisabilityMemberXref")
                        .HasForeignKey("DisabilityLevelId")
                        .HasConstraintName("FK_DisabilityMemberXref_DisabilityLevel");

                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("DisabilityMemberXref")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_DisabilityMemberXref_Member");
                });

            modelBuilder.Entity("MM.ClientModels.DivisionMemberXref", b =>
                {
                    b.HasOne("MM.ClientModels.Division", "Division")
                        .WithMany("DivisionMemberXref")
                        .HasForeignKey("DivisonId")
                        .HasConstraintName("FK_DivisionMemberXref_Division");

                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("DivisionMemberXref")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_DivisionMemberXref_Member");
                });

            modelBuilder.Entity("MM.ClientModels.Donation", b =>
                {
                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("Donation")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Donation_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PromotionDetail", "PromotionDetail")
                        .WithMany("Donation")
                        .HasForeignKey("PromotionDetailId")
                        .HasConstraintName("FK_Donation_PromotionDetail");
                });

            modelBuilder.Entity("MM.ClientModels.EmailCcrule", b =>
                {
                    b.HasOne("MM.ClientModels.EmailType", "EmailType")
                        .WithMany("EmailCcrule")
                        .HasForeignKey("EmailTypeId")
                        .HasConstraintName("FK_EmailCCRule_EmailType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Role", "Role")
                        .WithMany("EmailCcrule")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_EmailCCRule_Role")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EmailTemplateContent", b =>
                {
                    b.HasOne("MM.ClientModels.EmailTemplateName", "EmailTemplateName")
                        .WithMany("EmailTemplateContent")
                        .HasForeignKey("EmailTemplateNameId")
                        .HasConstraintName("FK_EmailTemplateContent_EmailTemplateName")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EmploymentMemberXref", b =>
                {
                    b.HasOne("MM.ClientModels.EmploymentCategory", "EmploymentCategory")
                        .WithMany("EmploymentMemberXref")
                        .HasForeignKey("EmploymentCategoryId")
                        .HasConstraintName("FK_EmploymentMemberXref_EmploymentCategory");

                    b.HasOne("MM.ClientModels.MemberUser", "MemberUser")
                        .WithMany("EmploymentMemberXref")
                        .HasForeignKey("MemberUserId")
                        .HasConstraintName("FK_EmploymentMemberXref_MemberUser")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EquipmentCount", b =>
                {
                    b.HasOne("MM.ClientModels.Equipment", "Equipment")
                        .WithMany("EquipmentCount")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("FK_EquipmentCount_Equipment")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Event", b =>
                {
                    b.HasOne("MM.ClientModels.Address", "Address")
                        .WithMany("Event")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Event_Address")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.ClientUser", "Organizer")
                        .WithMany("Event")
                        .HasForeignKey("OrganizerId")
                        .HasConstraintName("FK_Event_User")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.ClientTimeZone", "TimeZone")
                        .WithMany("Event")
                        .HasForeignKey("TimeZoneId")
                        .HasConstraintName("FK_Event_TimeZone")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventAccess", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventAccess")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventAccess_Event")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventAttendance", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventAttendance")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventAttendance_Event")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("EventAttendance")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_EventAttendance_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventCommunication", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventCommunication")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventCommunication_Event")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventCost", b =>
                {
                    b.HasOne("MM.ClientModels.EventCostItem", "EventCostItem")
                        .WithMany()
                        .HasForeignKey("EventCostItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventCostItem", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventEquipment", b =>
                {
                    b.HasOne("MM.ClientModels.Equipment", "Equipment")
                        .WithMany("EventEquipment")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("FK_EventEquipmentRequirement_Equipment")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventEquipment")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventEquipmentRequirement_Event")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventMinute", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventMinute")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventMinute_Event")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.EventMinuteStatus", "MinuteStatus")
                        .WithMany("EventMinute")
                        .HasForeignKey("MinuteStatusId")
                        .HasConstraintName("FK_EventMinute_EventMinuteStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventPreRequisiteEvent", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventPreRequisiteEventEvent")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventPreRequisiteEvent_Event")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Event", "PreRequisiteEvent")
                        .WithMany("EventPreRequisiteEventPreRequisiteEvent")
                        .HasForeignKey("PreRequisiteEventId")
                        .HasConstraintName("FK_EventPreRequisiteEvent_PreRequisiteEventId_Event")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventRegistration", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventRegistration")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventRegistration_Event")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.EventResponseType", "EventResponseType")
                        .WithMany("EventRegistration")
                        .HasForeignKey("EventResponseTypeId")
                        .HasConstraintName("FK_EventRegistration_EventResponseType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("EventRegistration")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_EventRegistration_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventRestrictionList", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventRestrictionList")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventRestrictionList_Event")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.MemberLevel", "MemberLevel")
                        .WithMany("EventRestrictionList")
                        .HasForeignKey("MemberLevelId")
                        .HasConstraintName("FK_EventRestrictionList_MemberLevel");

                    b.HasOne("MM.ClientModels.MemberTeam", "MemberTeam")
                        .WithMany("EventRestrictionList")
                        .HasForeignKey("MemberTeamId")
                        .HasConstraintName("FK_EventRestrictionList_MemberTeam");
                });

            modelBuilder.Entity("MM.ClientModels.EventRole", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventRole")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventRole_Event")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventRoleUserXref", b =>
                {
                    b.HasOne("MM.ClientModels.EventRole", "EventRole")
                        .WithMany("EventRoleUserXref")
                        .HasForeignKey("EventRoleId")
                        .HasConstraintName("FK_EventRoleUserXRef_EventRole")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.ClientUser", "User")
                        .WithMany("EventRoleUserXref")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EventRoleUserXRef_User")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.IndividualMemberShipHistory", b =>
                {
                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("IndividualMemberShipHistory")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_IndividualMemberShipHistory_Member");

                    b.HasOne("MM.ClientModels.MemberShipChangeReason", "MemberShipChangeReason")
                        .WithMany("IndividualMemberShipHistory")
                        .HasForeignKey("MemberShipChangeReasonId")
                        .HasConstraintName("FK_IndividualMemberShipHistory_MemberShipChangeReason");

                    b.HasOne("MM.ClientModels.MemberShipGrade", "MemberShipGrade")
                        .WithMany("IndividualMemberShipHistory")
                        .HasForeignKey("MemberShipGradeId")
                        .HasConstraintName("FK_IndividualMemberShipHistory_MembershipGrade");

                    b.HasOne("MM.ClientModels.MemberStatus", null)
                        .WithMany("IndividualMemberShipHistory")
                        .HasForeignKey("MemberStatusId");

                    b.HasOne("MM.ClientModels.MembershipType", "MembershipType")
                        .WithMany("IndividualMemberShipHistory")
                        .HasForeignKey("MembershipTypeId")
                        .HasConstraintName("FK_IndividualMemberShipHistory_MembershipType");
                });

            modelBuilder.Entity("MM.ClientModels.Invoice", b =>
                {
                    b.HasOne("MM.ClientModels.InvoiceStatus", "InvoiceStatus")
                        .WithMany("Invoice")
                        .HasForeignKey("InvoiceStatusId")
                        .HasConstraintName("FK_Invoice_InvoiceStatus")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("Invoice")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Invoice_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PaymentGateway", "PaymentGateway")
                        .WithMany("Invoice")
                        .HasForeignKey("PaymentGatewayId")
                        .HasConstraintName("FK_Invoice_PaymentGateway")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("Invoice")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_Invoice_RelatedTo");
                });

            modelBuilder.Entity("MM.ClientModels.InvolvementMemberXref", b =>
                {
                    b.HasOne("MM.ClientModels.Involvement", "Involvement")
                        .WithMany("InvolvementMemberXref")
                        .HasForeignKey("InvolvementId")
                        .HasConstraintName("FK_InvolvementMemberXref_Involvement");

                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("InvolvementMemberXref")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_InvolvementMemberXref_Member");
                });

            modelBuilder.Entity("MM.ClientModels.LandingPage", b =>
                {
                    b.HasOne("MM.ClientModels.MemberShipGrade", "MemberShipGrade")
                        .WithMany("LandingPage")
                        .HasForeignKey("MemberShipGradeId")
                        .HasConstraintName("FK_LandingPage_MembershipGrade")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Page", "Page")
                        .WithMany("LandingPage")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_LandingPage_Page")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MarketingGroupXref", b =>
                {
                    b.HasOne("MM.ClientModels.MarketingGroup", "MarketingGroup")
                        .WithMany("MarketingGroupXref")
                        .HasForeignKey("MarketingGroupId")
                        .HasConstraintName("FK_MarketingGroupXRef_MarketingGroup")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("MarketingGroupXref")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MarketingGroupXRef_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MarketingProfileXref", b =>
                {
                    b.HasOne("MM.ClientModels.MarketingProfile", "MarketingProfile")
                        .WithMany("MarketingProfileXref")
                        .HasForeignKey("MarketingProfileId")
                        .HasConstraintName("FK_MarketingProfileXRef_MarketingProfile")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("MarketingProfileXref")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MarketingProfileXRef_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MemberAddress", b =>
                {
                    b.HasOne("MM.ClientModels.AddressType", "AddressType")
                        .WithMany("MemberAddress")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("FK_MemberAddress_AddressType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.MemberBranch", "Branch")
                        .WithMany("MemberAddress")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_MemberAddress_MemberBranch");

                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("MemberAddress")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberAddress_Member");

                    b.HasOne("MM.ClientModels.Organization", "Organization")
                        .WithMany("MemberAddress")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_MemberAddress_Organization");
                });

            modelBuilder.Entity("MM.ClientModels.MemberAffliationXref", b =>
                {
                    b.HasOne("MM.ClientModels.Affliation", "Affliation")
                        .WithMany("MemberAffliationXref")
                        .HasForeignKey("AffliationId")
                        .HasConstraintName("FK_MemberAffliationXRef_Affliation");

                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("MemberAffliationXref")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberAffliationXRef_Member");
                });

            modelBuilder.Entity("MM.ClientModels.MemberBankingDetail", b =>
                {
                    b.HasOne("MM.ClientModels.AccountType", "AccountType")
                        .WithMany("MemberBankingDetail")
                        .HasForeignKey("AccountTypeId")
                        .HasConstraintName("FK_MemberBankingDetail_AccountType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("MemberBankingDetail")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberBankingDetail_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MemberCommunicationPreference", b =>
                {
                    b.HasOne("MM.ClientModels.CommunicationType", "CommunicationType")
                        .WithMany("MemberCommunicationPreference")
                        .HasForeignKey("CommunicationTypeId")
                        .HasConstraintName("FK_MemberCommunicationPreference_CommunicationType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("MemberCommunicationPreference")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberCommunicationPreference_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MemberEmailXref", b =>
                {
                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("MemberEmailXref")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_MemberEmailXref_RelatedTo");
                });

            modelBuilder.Entity("MM.ClientModels.MemberFileXref", b =>
                {
                    b.HasOne("MM.ClientModels.FileType", "FileType")
                        .WithMany("MemberFile")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("FK_MemberFileXref_FileType");

                    b.HasOne("MM.ClientModels.MemberUser", null)
                        .WithMany("MemberFileXref")
                        .HasForeignKey("MemberUserId");

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("MemberFileXref")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_MemberFileXref_RelatedTo");
                });

            modelBuilder.Entity("MM.ClientModels.MemberNotesXref", b =>
                {
                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("MemberNotesXref")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_MemberNotesXref_RelatedTo");
                });

            modelBuilder.Entity("MM.ClientModels.MemberPlanHistory", b =>
                {
                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("MemberPlanHistory")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MembershipHistory_Member");

                    b.HasOne("MM.ClientModels.PlanDetail", "MemberPlanDetail")
                        .WithMany("MemberPlanHistory")
                        .HasForeignKey("MemberPlanDetailId")
                        .HasConstraintName("FK_MemberPlanHistory_PlanDetail")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PlanMaster", "MemberPlanDetailNavigation")
                        .WithMany("MemberPlanHistory")
                        .HasForeignKey("MemberPlanDetailId")
                        .HasConstraintName("FK_MembershipHistory_PlanMaster")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Organization", "Organization")
                        .WithMany("MemberPlanHistory")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_MembershipHistory_Organization");
                });

            modelBuilder.Entity("MM.ClientModels.MemberQualificationXref", b =>
                {
                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("MemberQualificationXref")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberQualificationXRef_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.QualificationCategory", "QualificationCategory")
                        .WithMany("MemberQualificationXref")
                        .HasForeignKey("QualificationCategoryId")
                        .HasConstraintName("FK_MemberQualificationXRef_QualificationCategory");

                    b.HasOne("MM.ClientModels.QualificationEnrolmentCategory", "QualificationEnrolmentCategory")
                        .WithMany("MemberQualificationXref")
                        .HasForeignKey("QualificationEnrolmentCategoryId")
                        .HasConstraintName("FK_MemberQualificationXRef_QualificationEnrolmentCategory");

                    b.HasOne("MM.ClientModels.Qualification", null)
                        .WithMany("MemberQualificationXref")
                        .HasForeignKey("QualificationId");

                    b.HasOne("MM.ClientModels.QualificationType", "QualificationType")
                        .WithMany("MemberQualificationXref")
                        .HasForeignKey("QualificationTypeId")
                        .HasConstraintName("FK_MemberQualificationXRef_QualificationType");
                });

            modelBuilder.Entity("MM.ClientModels.MemberRefereeXref", b =>
                {
                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("MemberRefereeXref")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_MemberRefereeXref_RelatedTo");
                });

            modelBuilder.Entity("MM.ClientModels.MemberUser", b =>
                {
                    b.HasOne("MM.ClientModels.ApplicationUser", "ApplicationUser")
                        .WithMany("MemberUser")
                        .HasForeignKey("ApplicaitonUserId")
                        .HasConstraintName("FK_Member_ApplicationUser");

                    b.HasOne("MM.ClientModels.ClientBranch", "ClientBranch")
                        .WithMany("MemberUser")
                        .HasForeignKey("ClientBranchId")
                        .HasConstraintName("FK_Member_ClientBranch");

                    b.HasOne("MM.ClientModels.Country", "Country")
                        .WithMany("MemberUser")
                        .HasForeignKey("CountryId");

                    b.HasOne("MM.ClientModels.Ethnicity", "Ethnicity")
                        .WithMany("MemberUser")
                        .HasForeignKey("EthnicityId")
                        .HasConstraintName("FK_Member_Ethnicity");

                    b.HasOne("MM.ClientModels.Qualification", "HighestQualitification")
                        .WithMany("MemberUser")
                        .HasForeignKey("HighestQualitificationId")
                        .HasConstraintName("FK_Member_Qualification");

                    b.HasOne("MM.ClientModels.Language", "HomeLanguage")
                        .WithMany("MemberUser")
                        .HasForeignKey("HomeLanguageId")
                        .HasConstraintName("FK_Member_Language");

                    b.HasOne("MM.ClientModels.MemberBranch", "MemberBranch")
                        .WithMany("Member")
                        .HasForeignKey("MemberBranchId")
                        .HasConstraintName("FK_Member_MemberBranch");

                    b.HasOne("MM.ClientModels.MemberLevel", "MemberLevel")
                        .WithMany("Member")
                        .HasForeignKey("MemberLevelId")
                        .HasConstraintName("FK_Member_MemberLevel");

                    b.HasOne("MM.ClientModels.MemberStatus", "MemberStatus")
                        .WithMany("MemberUser")
                        .HasForeignKey("MemberStatusId")
                        .HasConstraintName("FK_Member_MemberStatus");

                    b.HasOne("MM.ClientModels.MemberTeam", "MemberTeam")
                        .WithMany("Member")
                        .HasForeignKey("MemberTeamId")
                        .HasConstraintName("FK_Member_MemberTeam");

                    b.HasOne("MM.ClientModels.MemberShipGrade", "MembershipGrade")
                        .WithMany("MemberUser")
                        .HasForeignKey("MembershipGradeId")
                        .HasConstraintName("FK_Member_MembershipGrade");

                    b.HasOne("MM.ClientModels.MembershipType", "MembershipType")
                        .WithMany("MemberUser")
                        .HasForeignKey("MembershipTypeId")
                        .HasConstraintName("FK_Member_MembershipType");

                    b.HasOne("MM.ClientModels.Occupation", "Occupation")
                        .WithMany("MemberUser")
                        .HasForeignKey("OccupationId")
                        .HasConstraintName("FK_Member_Occupation");

                    b.HasOne("MM.ClientModels.Organization", "Organization")
                        .WithMany("Member")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Member_Organization");

                    b.HasOne("MM.ClientModels.OrganizationStructure", "OrganizationStructure")
                        .WithMany("Member")
                        .HasForeignKey("OrganizationStructureId")
                        .HasConstraintName("FK_Member_OrganizationStructure");

                    b.HasOne("MM.ClientModels.ClientUser", "OwnerClientUser")
                        .WithMany("MemberUser")
                        .HasForeignKey("OwnerClientUserId")
                        .HasConstraintName("FK_Member_OwnerClientUser");

                    b.HasOne("MM.ClientModels.Organization", "ParentMember")
                        .WithMany()
                        .HasForeignKey("ParentMemberid");

                    b.HasOne("MM.ClientModels.PreferredContactTime", "PreferredAppointmentTime")
                        .WithMany("MemberUser")
                        .HasForeignKey("PreferredAppointmentTimeId")
                        .HasConstraintName("FK_Member_PreferredContactTime");

                    b.HasOne("MM.ClientModels.ReferralType", "ReferralType")
                        .WithMany("Member")
                        .HasForeignKey("ReferralTypeId")
                        .HasConstraintName("FK_Member_ReferralType");

                    b.HasOne("MM.ClientModels.Currency", "TransactionCurrency")
                        .WithMany("MemberUser")
                        .HasForeignKey("TransactionCurrencyid")
                        .HasConstraintName("FK_Member_Currency");

                    b.HasOne("MM.ClientModels.VolunteerHours", "VolunteerWorkHours")
                        .WithMany("MemberUser")
                        .HasForeignKey("VolunteerWorkHoursId")
                        .HasConstraintName("FK_Member_VolunteerHours");
                });

            modelBuilder.Entity("MM.ClientModels.Organization", b =>
                {
                    b.HasOne("MM.ClientModels.MemberUser", "BillingContact")
                        .WithMany("BillingContactOrganization")
                        .HasForeignKey("BillingContactId")
                        .HasConstraintName("FK_Organization_BillingContact");

                    b.HasOne("MM.ClientModels.Business", null)
                        .WithMany("Organization")
                        .HasForeignKey("BusinessId");

                    b.HasOne("MM.ClientModels.ClientBranch", "ClientBranch")
                        .WithMany("Organization")
                        .HasForeignKey("ClientBranchId")
                        .HasConstraintName("FK_Organization_ClientBranch");

                    b.HasOne("MM.ClientModels.MemberUser", "ContactPerson")
                        .WithMany("ContactPersonOrganization")
                        .HasForeignKey("ContactPersonId")
                        .HasConstraintName("FK_Organization_ContactPerson");

                    b.HasOne("MM.ClientModels.MemberLevel", "MemberLevel")
                        .WithMany("Organization")
                        .HasForeignKey("MemberLevelId")
                        .HasConstraintName("FK_Organization_MemberLevel");

                    b.HasOne("MM.ClientModels.MemberShipGrade", null)
                        .WithMany("Organization")
                        .HasForeignKey("MemberShipGradeId");

                    b.HasOne("MM.ClientModels.MemberStatus", "MemberStatus")
                        .WithMany("Organization")
                        .HasForeignKey("MemberStatusId")
                        .HasConstraintName("FK_Organization_MemberStatus");

                    b.HasOne("MM.ClientModels.OrganizationGrade", "OrganizationGrade")
                        .WithMany("Organization")
                        .HasForeignKey("OrganizationGradeId")
                        .HasConstraintName("FK_Organization_OrganizationGrade");

                    b.HasOne("MM.ClientModels.OrganizationType", "OrganizationType")
                        .WithMany("Organization")
                        .HasForeignKey("OrganizationTypeId")
                        .HasConstraintName("FK_Organization_OrganizationType");

                    b.HasOne("MM.ClientModels.MemberUser", "PrimaryContact")
                        .WithMany("PrimaryContactOrganization")
                        .HasForeignKey("PrimaryContactId")
                        .HasConstraintName("FK_Organization_PrimaryContact");

                    b.HasOne("MM.ClientModels.Currency", "TransactionCurrency")
                        .WithMany("Organization")
                        .HasForeignKey("TransactionCurrencyid")
                        .HasConstraintName("FK_Organization_Currency");
                });

            modelBuilder.Entity("MM.ClientModels.OrganizationBusinessXref", b =>
                {
                    b.HasOne("MM.ClientModels.Business", "Business")
                        .WithMany("OrganizationBusinessXref")
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("FK_OrganizationBusinessXref_Business");

                    b.HasOne("MM.ClientModels.Organization", "Organization")
                        .WithMany("OrganizationBusinessXref")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_OrganizationBusinessXref_Organization");
                });

            modelBuilder.Entity("MM.ClientModels.OrganizationMemberShipHistory", b =>
                {
                    b.HasOne("MM.ClientModels.MemberShipChangeReason", "MemberShipChangeReason")
                        .WithMany("OrganizationMemberShipHistory")
                        .HasForeignKey("MemberShipChangeReasonId")
                        .HasConstraintName("FK_OrganizationMemberShipHistory_MemberShipChangeReason");

                    b.HasOne("MM.ClientModels.MemberStatus", null)
                        .WithMany("OrganizationMemberShipHistory")
                        .HasForeignKey("MemberStatusId");

                    b.HasOne("MM.ClientModels.OrganizationGrade", "OrganizationGrade")
                        .WithMany("OrganizationMemberShipHistory")
                        .HasForeignKey("OrganizationGradeId")
                        .HasConstraintName("FK_OrganizationMemberShipHistory_OrganizationGrade");

                    b.HasOne("MM.ClientModels.Organization", "Organization")
                        .WithMany("OrganizationMemberShipHistory")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_OrganizationMemberShipHistory_Organization");

                    b.HasOne("MM.ClientModels.OrganizationType", "OrganizationType")
                        .WithMany("OrganizationMemberShipHistory")
                        .HasForeignKey("OrganizationTypeId")
                        .HasConstraintName("FK_OrganizationMemberShipHistory_OrganizationType");
                });

            modelBuilder.Entity("MM.ClientModels.PaymentSetting", b =>
                {
                    b.HasOne("MM.ClientModels.Currency", "Currency")
                        .WithMany("PaymentSetting")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_PaymentSetting_Currency");
                });

            modelBuilder.Entity("MM.ClientModels.PaymentSettingAllowedCard", b =>
                {
                    b.HasOne("MM.ClientModels.PaymentCard", "PaymentCard")
                        .WithMany("PaymentSettingAllowedCard")
                        .HasForeignKey("PaymentCardId")
                        .HasConstraintName("FK_PaymentSettingAllowedCard_PaymentCard")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PaymentSetting", "PaymentSetting")
                        .WithMany("PaymentSettingAllowedCard")
                        .HasForeignKey("PaymentSettingId")
                        .HasConstraintName("FK_PaymentSettingAllowedCard_PaymentSetting")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PlanCanChangeToXref", b =>
                {
                    b.HasOne("MM.ClientModels.PlanMaster", "FromPlanMaster")
                        .WithMany("PlanCanChangeToXrefFromPlanMaster")
                        .HasForeignKey("FromPlanMasterId")
                        .HasConstraintName("FK_MemberPlanCanChangeTo_PlanMaster")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PlanMaster", "ToPlanMaster")
                        .WithMany("PlanCanChangeToXrefToPlanMaster")
                        .HasForeignKey("ToPlanMasterId")
                        .HasConstraintName("FK_MemberPlanCanChangeTo_PlanMaster2")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PlanDetail", b =>
                {
                    b.HasOne("MM.ClientModels.Currency", "Currency")
                        .WithMany("PlanDetail")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_PlanDetail_Currency")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PlanFrequency", "PlanFrequency")
                        .WithMany("PlanDetail")
                        .HasForeignKey("PlanFrequencyId")
                        .HasConstraintName("FK_PlanDetail_PlanFrequency")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PlanMaster", "PlanMaster")
                        .WithMany("PlanDetail")
                        .HasForeignKey("PlanMasterId")
                        .HasConstraintName("FK_PlanDetail_PlanMaster")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PlanMaster", b =>
                {
                    b.HasOne("MM.ClientModels.MembershipType", "MembershipType")
                        .WithMany("PlanMaster")
                        .HasForeignKey("MembershipTypeId")
                        .HasConstraintName("FK_PlanMaster_MembershipType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PaymentSetting", "PaymentMethod")
                        .WithMany("PlanMaster")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK_PlanMaster_PaymentSetting")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PromotionDetail", b =>
                {
                    b.HasOne("MM.ClientModels.MemberLevel", "MemberLevel")
                        .WithMany("PromotionDetail")
                        .HasForeignKey("MemberLevelId")
                        .HasConstraintName("FK_PromotionDetail_MemberLevel");

                    b.HasOne("MM.ClientModels.MemberShipGrade", "MembershipGrade")
                        .WithMany("PromotionDetail")
                        .HasForeignKey("MembershipGradeId")
                        .HasConstraintName("FK_PromotionDetail_MembershipGrade");

                    b.HasOne("MM.ClientModels.PromotionMaster", "PromotionMaster")
                        .WithMany("PromotionDetail")
                        .HasForeignKey("PromotionMasterId")
                        .HasConstraintName("FK_PromotionDetail_PromotionMaster")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PromotionMaster", b =>
                {
                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany()
                        .HasForeignKey("RelatedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PromotionResponse", b =>
                {
                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("PromotionResponse")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_PromotionResponse_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PromotionMaster", "PromotionMaster")
                        .WithMany("PromotionResponse")
                        .HasForeignKey("PromotionMasterId")
                        .HasConstraintName("FK_PromotionResponse_PromotionMaster")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PromotionResponseType", "PromotionResponseTypeNavigation")
                        .WithMany("PromotionResponse")
                        .HasForeignKey("PromotionResponseType")
                        .HasConstraintName("FK_PromotionResponse_PromotionResponseType")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Refund", b =>
                {
                    b.HasOne("MM.ClientModels.MemberUser", "Member")
                        .WithMany("Refund")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Refund_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PaymentGateway", "PaymentGateway")
                        .WithMany("Refund")
                        .HasForeignKey("PaymentGatewayId")
                        .HasConstraintName("FK_Refund_PaymentGateway")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("Refund")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_Refund_RelatedTo");
                });

            modelBuilder.Entity("MM.ClientModels.RolePermissionXref", b =>
                {
                    b.HasOne("MM.ClientModels.Permission", "Permission")
                        .WithMany("RolePermissionXref")
                        .HasForeignKey("Permissionid")
                        .HasConstraintName("FK_RolePermissionXRef_Permission")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Role", "Role")
                        .WithMany("RolePermissionXref")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RolePermissionXRef_Role")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.State", b =>
                {
                    b.HasOne("MM.ClientModels.Country", "Country")
                        .WithMany("State")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_State_Country")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.UserRoleXref", b =>
                {
                    b.HasOne("MM.ClientModels.Role", "Role")
                        .WithMany("UserRoleXref")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRole_Role")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.ClientUser", "User")
                        .WithMany("UserRoleXref")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRole_User")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MM.ClientModels.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MM.ClientModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MM.ClientModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MM.ClientModels.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MM.ClientModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MM.ClientModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
