@page "/tasks"
@model MDM.Pages.Manage.TasksModel

<script src='https://cdn.tutorialjinni.com/dragula/3.7.3/dragula.min.js'></script>

<style>


    .gu-mirror {
        position: fixed !important;
        margin: 0 !important;
        z-index: 9999 !important;
        opacity: 0.8;
        -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=80)";
        filter: alpha(opacity=80);
    }

    .gu-hide {
        display: none !important;
    }

    .popover {
        background-color: white;
    }
    /* Popover Header */
    .popover-header {
        color: #000 !important;
    }

    .example-class1 {
        background-color: #2a4254;
        cursor: pointer;
        float: right;
    }



    /* END EXAMPLE CLASSES */

    .gu-unselectable {
        -webkit-user-select: none !important;
        -moz-user-select: none !important;
        -ms-user-select: none !important;
        user-select: none !important;
    }

    .gu-transit {
        opacity: 0.2;
        -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=20)";
        filter: alpha(opacity=20);
    }
</style>
@Html.AntiForgeryToken()
<div class="row content-fluid">
    @foreach (var group in Model.groups)
    {
        <div class="col-md-2" id="@group.Id">
            <p class="text-danger pb-2 mb-2">@group.Name</p>

            @foreach (var taskitem in Model.taskItems)
            {
                @if (taskitem.Group != null && taskitem.Group.Name == group.Name)
                {
                    <div class="card mb-1 rounded-0 shadow-sm" id="@taskitem.Id">
                        @*<img class="card-img-top" src="..." alt="Card image cap">*@

                        <div class="card-body">

                            <h6 class="card-title"><small class="font-weight-bold">@taskitem.Name.Substring(0, 20) ..</small></h6>
                            <small class="font-weight-normal">@taskitem.Description.Substring(0, 50)</small>
                            <p class="card-text">

                                <button type="button" class="btn btn-danger btn-small p-1 m-0 example-class1"
                                        data-trigger="hover" data-toggle="popover" title="@taskitem.Name" data-content="@taskitem.Description">
                                    +
                                </button>&nbsp;&nbsp;

                                <small class="text-info">Last updated 3 mins ago</small>
                            </p>

                        </div>
                    </div>
                }
            }

        </div>
    }
</div>


<!-- .modal -->
<div class="modal fade" id="Mymodal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">
                    &times;
                </button>
                <h4 class="modal-title">
                    Notification
                </h4>
            </div>
            <div class="modal-body">
                Are you sure you want to continue?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">
                    Close
                </button>
                <button type="button" class="btn btn-primary">
                    Ok
                </button>
            </div>
        </div>
    </div>
</div>




@section scripts{

    <script>

        $('.card').on('click', function () {
            $('#Mymodal').modal('show')
        });

        var TaskMove;
        dragula([
            document.getElementById("1"),
            document.getElementById("2"),
            document.getElementById("3"),
            document.getElementById("4"),
            document.getElementById("5"),
            document.getElementById("6")
        ])
            .on("drag", function (el) {
                // console.log(el.getElementById("taskid").innerHtml);
                //  el.className.replace("ex-moved", "");

            })
            .on("drop", function (el, container) {

                //   el.className += "ex-moved";
                $.ajax({
                    url: '?handler=Save',
                    dataType: "json",
                    type: "POST",
                    headers: { "RequestVerificationToken": $('input[name = __RequestVerificationToken]').val() },
                    data: { "taskitem": Number(el.id), "group": Number(container.id) }
                });

            })
            .on("over", function (el, container) {

                //  container.className += "ex-over";
            })
            .on("out", function (el, container) {

                //  container.className.replace("ex-over", "");
            });

        function Save() {


            //$.post({
            //    url: '?handler=Save',
            //    dataType: 'json',
            //    headers : {
            //        RequestVerificationToken:
            //            $('input:hidden[name="__RequestVerificationToken"]').val()
            //    },
            //    data: JSON.stringify(value)
            //})
            //    .done(function (data) {
            //        if (data.success) {
            //            }
            //            else {
            //                MMNotify(data.message, "danger");
            //            }
            //    })
            //    .fail(function (error) {
            //        MMNotify("Unknown error", "danger");
            //    });
            return false;
        }

    </script>


}